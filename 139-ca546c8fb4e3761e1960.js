(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{1005:function(e,n){},1409:function(e){e.exports=JSON.parse('{"name":"terra-modal-manager","main":"lib/ModalManager.js","version":"6.23.0","description":"The ModalManager is a DisclosureManager implementation that presents disclosed content using an AbstractModal.","repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"keywords":["Cerner","Terra","terra-modal-manager","ModalManager","UI"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"homepage":"https://github.com/cerner/terra-framework#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","terra-disclosure-manager":"^4.16.0"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","terra-abstract-modal":"^3.19.0","terra-action-header":"^2.0.0","terra-content-container":"^3.0.0","terra-slide-group":"^4.15.0"},"devDependencies":{"terra-collapsible-menu-view":"^6.23.0","terra-doc-template":"^2.2.0","terra-form-select":"^5.0.0"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","jest":"jest --config ../../jestconfig.js","wdio-default":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio-fusion":"cd ../.. && THEME=orion-fusion-theme npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio":"npm run wdio-default && npm run wdio-fusion"}}')},2076:function(e,n,t){"use strict";t.r(n),n.default="# Terra Modal Manager\n\nThe ModalManager is a DisclosureManager implementation that presents disclosed content using an AbstractModal.\n\nModalManager provides the ability to handle and navigate stacked disclosures.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-modal-manager`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n| terra-disclosure-manager | ^4.16.0 |\n\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\n\n### Implementation Requirements\n\nThe ModalManager utilizes the DisclosureManager API to manage disclosure requests. The components provided as children to the ModalManager, and the components disclosed within it, must interface with the ModalManager's context using the `withDisclosureManager()` higher-order component generator provided by the `terra-disclosure-manager` package. Alternatively, `DisclosureManagerContext` can be consumed directly using the `useContext` hook.\n\nThe ModalManager responds to `\"modal\"` disclosure type requests. Components that wish to disclose content using the ModalManager should provide a preferred type of `\"modal\"`. This value is exported from the package as `disclosureType`. Please see the [DisclosureManager documentation](https://engineering.cerner.com/terra-ui/#/components/terra-disclosure-manager/disclosure-manager/about) for a full description of the ModalManager's capabilities.\n\n### DisclosureManagerHeaderAdapter Support\n\nIf a component disclosed by the ModalManager renders a `DisclosureManagerHeaderAdapter`, the ModalManager will render an ActionHeader and provide the standard disclosure navigation controls (close, go back, maximize/minimize, etc.) within it. The disclosed component can use the `DisclosureManagerHeaderAdapter` to inject its own title and CollapsibleButtonView into the ActionHeader.\n\nIf the disclosed component does **not** render a `DisclosureManagerHeaderAdapter`, the ModalManager will **not** render an ActionHeader itself. In this case, it is assumed that the disclosed component is rendering its own header. The disclosed component is responsible for rendering the appropriate controls to navigate the disclosure stack.\ns\n> Note: The DisclosureManagerHeaderAdapter is the preferred way to present a header within the ModalManager. In a future major release, the ModalManager will **always** render the header and navigation controls, regardless of the presence of a DisclosureManagerHeaderAdapter.\n\n### Disclosure Accessory\n\nThe `disclosureAccessory` prop allows consumers of the ModalManager to render a static component above the disclosed modal content. The provided component will be rendered below the standard ActionHeader and above the disclosed content. This can be used to easily provide additional context to every disclosed component. This component is provided once to the ModalManager instance, not on a per-disclosure basis, and each component in the disclosure stack will be decorated with the same accessory component.\n\n### Example\n\n```jsx\nimport React from 'react';\nimport Button from 'terra-button';\nimport ModalManager, { disclosureType } from 'terra-modal-manager';\nimport { withDisclosureManager, DisclosureManagerContext, DisclosureManagerHeaderAdapter } from 'terra-disclosure-manager';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\n\nconst ModalComponentB = () => (\n  <React.Fragment>\n    <DisclosureManagerHeaderAdapter\n      title=\"Modal Component B\"\n    />\n    <p>I am ModalComponentB!</p>\n  </React.Fragment>\n);\n\nconst ModalComponentA = () => {\n  const disclosureManager = React.useContext(DisclosureManagerContext);\n\n  return (\n    <div>\n      <DisclosureManagerHeaderAdapter\n        title=\"Modal Component A\"\n        collapsibleMenuView={<CollapsibleMenuView />}\n      />\n      <p>I am ModalComponentA!</p>\n      <Button\n        text=\"Disclose ModalComponentB\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: 'modal',\n            size: 'large',\n            content: {\n              key: 'modal-component-b-instance',\n              component: <ModalComponentB />\n            }\n          });\n        }}\n      />\n    </div>\n  );\n}\n\nconst MyContentComponent = withDisclosureManager(({ disclosureManager }) => (\n  <div>\n    <p>I am MyContentComponent!</p>\n    <Button\n      text=\"Disclose ModalComponentA\"\n      onClick={() => {\n        disclosureManager.disclose({\n          preferredType: 'modal',\n          size: 'large',\n          content: {\n            key: 'modal-component-a-instance',\n            component: <ModalComponentA />\n          }\n        });\n      }}\n    />\n  </div>\n));\n\nMyContentComponent.propTypes = {\n  disclosureManager: disclosureManagerShape,\n}\n\nlet MyModalManagerComponent = () => (\n  <ModalManager\n    disclosureAccessory={<div>Disclosure Accessory</div>}\n  >\n    <MyContentComponent />\n  </ModalManager>\n);\n```\n\n## Component Features\n\n- [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n- [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n- [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n\n[1]: https://github.com/cerner/terra-core/tree/master/packages/terra-content-container/docs\n[2]: https://github.com/cerner/terra-core/tree/master/packages/terra-dialog/docs\n"},2077:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport AbstractModal from 'terra-abstract-modal';\nimport ActionHeader from 'terra-action-header';\nimport SlideGroup from 'terra-slide-group';\nimport DisclosureManager, { availableDisclosureSizes } from 'terra-disclosure-manager';\nimport ContentContainer from 'terra-content-container';\nimport styles from './ModalManager.module.scss';\n\nconst disclosureType = 'modal';\nexport { disclosureType };\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The components to be rendered in the body of the ModalManager. These components will receive the\n   * disclosure capabilities through the DisclosureManger's context API.\n   */\n  children: PropTypes.node,\n  /**\n   * The component to render within the Modal above the disclosed content.\n   */\n  disclosureAccessory: PropTypes.element,\n  /**\n   * @private\n   * The container to wrap the disclosed content. This should be provided from the application level.\n   */\n  withDisclosureContainer: PropTypes.func,\n};\n\nconst heightFromSize = {\n  tiny: 240,\n  small: 420,\n  medium: 600,\n  large: 870,\n  huge: 960,\n};\n\nconst widthFromSize = {\n  tiny: 320,\n  small: 640,\n  medium: 960,\n  large: 1280,\n  huge: 1600,\n};\n\nclass ModalManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderModal = this.renderModal.bind(this);\n  }\n\n  renderModal(manager) {\n    const {\n      children, disclosureAccessory, withDisclosureContainer, ...customProps\n    } = this.props;\n\n    const containerClassNames = cx([\n      'container',\n      customProps.className,\n    ]);\n\n    const classArray = ['modal-manager'];\n    const isFullscreen = manager.disclosure.isMaximized || manager.disclosure.size === availableDisclosureSizes.FULLSCREEN;\n    if (!isFullscreen) {\n      if (manager.disclosure.dimensions) {\n        classArray.push(`height-${manager.disclosure.dimensions.height}`, `width-${manager.disclosure.dimensions.width}`);\n      } else if (manager.disclosure.size) {\n        classArray.push(`height-${heightFromSize[manager.disclosure.size]}`, `width-${widthFromSize[manager.disclosure.size]}`);\n      }\n    }\n\n    const presentedDisclosureComponentKey = manager.disclosureComponentKeys[manager.disclosureComponentKeys.length - 1];\n    const presentedDisclosureComponentData = manager.disclosureComponentData[presentedDisclosureComponentKey] || {};\n    const headerDataForPresentedComponent = presentedDisclosureComponentData.headerAdapterData;\n\n    return (\n      <div {...customProps} className={containerClassNames}>\n        {manager.children.components}\n        <AbstractModal\n          isOpen={manager.disclosure.isOpen}\n          isFullscreen={isFullscreen}\n          classNameModal={cx(classArray)}\n          onRequestClose={() => {\n            manager.closeDisclosure();\n          }}\n          closeOnEsc\n          closeOnOutsideClick={false}\n          ariaLabel=\"Modal\"\n        >\n          <ContentContainer\n            fill\n            header={(\n              <React.Fragment>\n                {headerDataForPresentedComponent ? (\n                  <ActionHeader\n                    title={headerDataForPresentedComponent.title}\n                    onClose={manager.closeDisclosure}\n                    onBack={manager.disclosureComponentKeys.length > 1 ? manager.dismissPresentedComponent : undefined}\n                    onMaximize={manager.maximizeDisclosure}\n                    onMinimize={manager.minimizeDisclosure}\n                  >\n                    {headerDataForPresentedComponent.collapsibleMenuView}\n                  </ActionHeader>\n                ) : undefined}\n                {disclosureAccessory}\n              </React.Fragment>\n            )}\n          >\n            <SlideGroup items={manager.disclosure.components} isAnimated={!isFullscreen} />\n          </ContentContainer>\n        </AbstractModal>\n      </div>\n    );\n  }\n\n  render() {\n    const { withDisclosureContainer, children } = this.props;\n\n    return (\n      <DisclosureManager\n        withDisclosureContainer={withDisclosureContainer}\n        supportedDisclosureTypes={[disclosureType]}\n        render={this.renderModal}\n        trapNestedDisclosureRequests\n      >\n        {children}\n      </DisclosureManager>\n    );\n  }\n}\n\nModalManager.propTypes = propTypes;\n\nexport default ModalManager;\n"},2078:function(e,n,t){"use strict";var s=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=s(t(163)),r=s(t(20)),a=s(t(22)),i=s(t(23)),l=s(t(24)),c=s(t(27)),d=s(t(25)),u=s(t(0)),p=s(t(2)),m=s(t(4)),h=s(t(83)),g=s(t(1086)),f=s(t(55)),y=t(226),b=s(t(356)),M=s(t(2079)),C=m.default.bind(M.default),v=function(e){function n(e){var t;return(0,r.default)(this,n),(t=(0,i.default)(this,(0,l.default)(n).call(this,e))).checkLockState=t.checkLockState.bind((0,c.default)(t)),t.state={text:void 0},t}return(0,d.default)(n,e),(0,a.default)(n,[{key:"componentDidMount",value:function(){var e=this.context;e&&e.registerDismissCheck&&e.registerDismissCheck(this.checkLockState)}},{key:"checkLockState",value:function(){var e=this;return this.state.text&&this.state.text.length?new Promise((function(n,t){confirm("".concat(e.props.name," has unsaved changes that will be lost. Do you wish to continue?"))?n():t()})):Promise.resolve()}},{key:"render",value:function(){var e=this,t=this.props,s=t.name,o=t.disclosureType,r=this.context;return u.default.createElement(f.default,{fill:!0},u.default.createElement(y.DisclosureManagerHeaderAdapter,{title:s,collapsibleMenuView:u.default.createElement(g.default,null,u.default.createElement(g.default.Item,{text:"Button 1",key:"button_1",onClick:function(){e.setState({selectedHeaderAction:"Button 1"})}}),u.default.createElement(g.default.Item,{text:"Button 2",key:"button_2",onClick:function(){e.setState({selectedHeaderAction:"Button 2"})}}))}),u.default.createElement("div",{className:C("content-wrapper")},u.default.createElement("h3",null,s),u.default.createElement("p",null,"The disclosed component can disclose content within the same modal."),u.default.createElement("p",null,"It can also render a header (like above) that implements the various DisclosureManager control functions."),u.default.createElement("button",{type:"button",onClick:function(){r.dismiss().catch((function(){console.log("Dismiss failed. A lock must be in place.")}))}},"Dismiss"),u.default.createElement("button",{type:"button",onClick:function(){r.disclose({preferredType:o,size:"small",content:{key:"Nested ".concat(s),component:u.default.createElement(n,{name:"Nested ".concat(s),disclosureType:o})}})}},"Disclose Again"),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below."),u.default.createElement("input",{type:"text",onChange:function(n){e.setState({text:n.target.value})},value:this.state.text||""}),this.state.text&&this.state.text.length?u.default.createElement("p",null,"Component has unsaved changes!"):null,u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("p",null,"Selected Header Action:"," ",u.default.createElement("b",null,this.state.selectedHeaderAction))))}}]),n}(u.default.Component);v.contextType=y.DisclosureManagerContext,v.propTypes={name:p.default.string,disclosureType:p.default.string},v.defaultProps={name:"Disclosure Component"};var D=Object.keys(y.availableDisclosureHeights),w=Object.keys(y.availableDisclosureWidths),T=function(e){return e.map((function(e,n){var t=n;return u.default.createElement("option",{key:t,value:e},e)}))},x=function(e){function n(e){var t;return(0,r.default)(this,n),(t=(0,i.default)(this,(0,l.default)(n).call(this,e))).renderButton=t.renderButton.bind((0,c.default)(t)),t.handleSelectChange=t.handleSelectChange.bind((0,c.default)(t)),t.getId=t.getId.bind((0,c.default)(t)),t.state={id:"dimensions",disclosureHeight:D[0],disclosureWidth:w[0]},t}return(0,d.default)(n,e),(0,a.default)(n,[{key:"getId",value:function(e){return e+this.state.id}},{key:"handleSelectChange",value:function(e){this.setState((0,o.default)({},e.target.name,e.target.value))}},{key:"renderButton",value:function(e){var n=this.props.disclosureType,t=this.context;return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:n,size:e,content:{key:"Content-Disclosure-".concat(e),component:u.default.createElement(v,{name:"Disclosure Component",disclosureType:n})}})}},"Disclose (".concat(e,")"))}},{key:"renderFormButton",value:function(){var e=this,n=this.props.disclosureType,t=this.context,s="Disclose (".concat(this.state.disclosureHeight,") x (").concat(this.state.disclosureWidth,")");return u.default.createElement("button",{type:"button",onClick:function(){t.disclose({preferredType:n,dimensions:{height:e.state.disclosureHeight,width:e.state.disclosureWidth},content:{key:"Content-Disclosure-Dimensions",component:u.default.createElement(v,{name:"Disclosure Component",disclosureType:n})}})}},s)}},{key:"renderForm",value:function(){return u.default.createElement("form",null,u.default.createElement("label",{htmlFor:this.getId("disclosureHeight")},"Pop Content Height"),u.default.createElement("select",{id:this.getId("disclosureHeight"),name:"disclosureHeight",value:this.state.disclosureHeight,onChange:this.handleSelectChange},T(D)),u.default.createElement("br",null),u.default.createElement("br",null),u.default.createElement("label",{htmlFor:this.getId("disclosureWidth")},"Pop Content Width"),u.default.createElement("select",{id:this.getId("disclosureWidth"),name:"disclosureWidth",value:this.state.disclosureWidth,onChange:this.handleSelectChange},T(w)),u.default.createElement("br",null),u.default.createElement("br",null))}},{key:"render",value:function(){return u.default.createElement(f.default,{header:u.default.createElement(h.default,{title:"ModalManager Child Component"})},u.default.createElement("div",{className:C("content-wrapper")},this.renderButton("default"),this.renderButton("tiny"),this.renderButton("small"),this.renderButton("medium"),this.renderButton("large"),this.renderButton("huge"),this.renderButton("fullscreen"),u.default.createElement("br",null),u.default.createElement("p",null,"The child components can disclose content in the modal at various sizes.")),u.default.createElement("div",{className:C("content-wrapper")},this.renderForm(),this.renderFormButton()))}}]),n}(u.default.Component);x.contextType=y.DisclosureManagerContext,x.propTypes={disclosureType:p.default.string};var k=function(e){var n=e.showDisclosureAccessory;return u.default.createElement("div",{className:C("example-wrapper")},u.default.createElement(b.default,{disclosureAccessory:n?u.default.createElement("div",{className:C("disclosure-accessory")},"Disclosure Accessory"):void 0},u.default.createElement(x,{disclosureType:"modal"})))};k.propTypes={showDisclosureAccessory:p.default.bool};var E=k;n.default=E},2079:function(e,n,t){e.exports={"example-wrapper":"example-styles-module__example-wrapper___mkqZp","content-wrapper":"example-styles-module__content-wrapper___EPc_g","disclosure-accessory":"example-styles-module__disclosure-accessory___1Ygfa"}},2080:function(e,n,t){"use strict";t.r(n),n.default="/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ActionHeader from 'terra-action-header';\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\nimport ContentContainer from 'terra-content-container';\nimport {\n  availableDisclosureHeights, availableDisclosureWidths, DisclosureManagerHeaderAdapter, DisclosureManagerContext,\n} from 'terra-disclosure-manager';\n\nimport ModalManager from 'terra-modal-manager';\nimport styles from 'terra-modal-manager/lib/terra-dev-site/doc/example/example-styles.module.scss';\n\nconst cx = classNames.bind(styles);\n\nclass DisclosureComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkLockState = this.checkLockState.bind(this);\n\n    this.state = {\n      text: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const disclosureManager = this.context;\n\n    if (disclosureManager && disclosureManager.registerDismissCheck) {\n      disclosureManager.registerDismissCheck(this.checkLockState);\n    }\n  }\n\n  checkLockState() {\n    if (this.state.text && this.state.text.length) {\n      return new Promise((resolve, reject) => {\n        // eslint-disable-next-line no-restricted-globals\n        if (!confirm(`${this.props.name} has unsaved changes that will be lost. Do you wish to continue?`)) { // eslint-disable-line no-alert\n          reject();\n          return;\n        }\n\n        resolve();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  render() {\n    const { name, disclosureType } = this.props;\n    const disclosureManager = this.context;\n\n    return (\n      <ContentContainer fill>\n        <DisclosureManagerHeaderAdapter\n          title={name}\n          collapsibleMenuView={(\n            <CollapsibleMenuView>\n              <CollapsibleMenuView.Item\n                text=\"Button 1\"\n                key=\"button_1\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 1',\n                  });\n                }}\n              />\n              <CollapsibleMenuView.Item\n                text=\"Button 2\"\n                key=\"button_2\"\n                onClick={() => {\n                  this.setState({\n                    selectedHeaderAction: 'Button 2',\n                  });\n                }}\n              />\n            </CollapsibleMenuView>\n          )}\n        />\n        <div className={cx('content-wrapper')}>\n          <h3>{name}</h3>\n          <p>The disclosed component can disclose content within the same modal.</p>\n          <p>It can also render a header (like above) that implements the various DisclosureManager control functions.</p>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.dismiss()\n                .catch(() => {\n                  console.log('Dismiss failed. A lock must be in place.'); // eslint-disable-line no-console\n                });\n            }}\n          >\n          Dismiss\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              disclosureManager.disclose({\n                preferredType: disclosureType,\n                size: 'small',\n                content: {\n                  key: `Nested ${name}`,\n                  component: <DisclosureComponent name={`Nested ${name}`} disclosureType={disclosureType} />,\n                },\n              });\n            }}\n          >\n          Disclose Again\n          </button>\n          <br />\n          <br />\n          <p>The disclosed component can register a dismiss check function that can interrupt and prevent dismissal. This component will prompt the user if text is detected in the input field below.</p>\n          <input\n            type=\"text\"\n            onChange={(event) => {\n              this.setState({\n                text: event.target.value,\n              });\n            }}\n            value={this.state.text || ''}\n          />\n          {this.state.text && this.state.text.length ? <p>Component has unsaved changes!</p> : null}\n          <br />\n          <br />\n          <p>\n            Selected Header Action:\n            {' '}\n            <b>{this.state.selectedHeaderAction}</b>\n          </p>\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nDisclosureComponent.contextType = DisclosureManagerContext;\nDisclosureComponent.propTypes = {\n  name: PropTypes.string,\n  disclosureType: PropTypes.string,\n};\nDisclosureComponent.defaultProps = {\n  name: 'Disclosure Component',\n};\n\nconst HEIGHT_KEYS = Object.keys(availableDisclosureHeights);\nconst WIDTH_KEYS = Object.keys(availableDisclosureWidths);\n\nconst generateDimensionOptions = values => (\n  values.map((currentValue, index) => {\n    const keyValue = index;\n    return <option key={keyValue} value={currentValue}>{currentValue}</option>;\n  })\n);\n\nclass ContentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderButton = this.renderButton.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.getId = this.getId.bind(this);\n\n    this.state = { id: 'dimensions', disclosureHeight: HEIGHT_KEYS[0], disclosureWidth: WIDTH_KEYS[0] };\n  }\n\n  getId(name) {\n    return name + this.state.id;\n  }\n\n  handleSelectChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  renderButton(size) {\n    const { disclosureType } = this.props;\n    const disclosureManager = this.context;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: disclosureType,\n            size,\n            content: {\n              key: `Content-Disclosure-${size}`,\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType={disclosureType} />,\n            },\n          });\n        }}\n      >\n        {`Disclose (${size})`}\n      </button>\n    );\n  }\n\n  renderFormButton() {\n    const { disclosureType } = this.props;\n    const disclosureManager = this.context;\n\n    const name = `Disclose (${this.state.disclosureHeight}) x (${this.state.disclosureWidth})`;\n\n    return (\n      <button\n        type=\"button\"\n        onClick={() => {\n          disclosureManager.disclose({\n            preferredType: disclosureType,\n            dimensions: { height: this.state.disclosureHeight, width: this.state.disclosureWidth },\n            content: {\n              key: 'Content-Disclosure-Dimensions',\n              component: <DisclosureComponent name=\"Disclosure Component\" disclosureType={disclosureType} />,\n            },\n          });\n        }}\n      >\n        {name}\n      </button>\n    );\n  }\n\n  renderForm() {\n    return (\n      <form>\n        <label htmlFor={this.getId('disclosureHeight')}>Pop Content Height</label>\n        <select id={this.getId('disclosureHeight')} name=\"disclosureHeight\" value={this.state.disclosureHeight} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(HEIGHT_KEYS)}\n        </select>\n        <br />\n        <br />\n        <label htmlFor={this.getId('disclosureWidth')}>Pop Content Width</label>\n        <select id={this.getId('disclosureWidth')} name=\"disclosureWidth\" value={this.state.disclosureWidth} onChange={this.handleSelectChange}>\n          {generateDimensionOptions(WIDTH_KEYS)}\n        </select>\n        <br />\n        <br />\n      </form>\n    );\n  }\n\n  render() {\n    return (\n      <ContentContainer\n        header={(\n          <ActionHeader\n            title=\"ModalManager Child Component\"\n          />\n        )}\n      >\n        <div className={cx('content-wrapper')}>\n          {this.renderButton('default')}\n          {this.renderButton('tiny')}\n          {this.renderButton('small')}\n          {this.renderButton('medium')}\n          {this.renderButton('large')}\n          {this.renderButton('huge')}\n          {this.renderButton('fullscreen')}\n          <br />\n          <p>The child components can disclose content in the modal at various sizes.</p>\n        </div>\n        <div className={cx('content-wrapper')}>\n          {this.renderForm()}\n          {this.renderFormButton()}\n        </div>\n      </ContentContainer>\n    );\n  }\n}\n\nContentComponent.contextType = DisclosureManagerContext;\nContentComponent.propTypes = {\n  disclosureType: PropTypes.string,\n};\n\nconst ModalManagerExample = ({ showDisclosureAccessory }) => (\n  <div className={cx('example-wrapper')}>\n    <ModalManager\n      disclosureAccessory={showDisclosureAccessory ? (\n        <div className={cx('disclosure-accessory')}>\n          Disclosure Accessory\n        </div>\n      ) : undefined}\n    >\n      <ContentComponent disclosureType=\"modal\" />\n    </ModalManager>\n  </div>\n);\n\nModalManagerExample.propTypes = {\n  showDisclosureAccessory: PropTypes.bool,\n};\n\nexport default ModalManagerExample;\n/* eslint-enable max-classes-per-file */\n"},2363:function(e,n,t){"use strict";var s=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var o=s(t(0)),r=s(t(1004)),a=t(1409),i=s(t(2076)),l=s(t(2077)),c=s(t(2078)),d=s(t(2080)),u=function(){return o.default.createElement(r.default,{packageName:a.name,readme:i.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(a.name),propsTables:[{componentSrc:l.default}],examples:[{title:"Example",example:o.default.createElement(c.default,null),source:d.default},{title:"Disclosure Accessory Example",example:o.default.createElement(c.default,{showDisclosureAccessory:!0}),source:d.default}]})};n.default=u}}]);
//# sourceMappingURL=139-ca546c8fb4e3761e1960.js.map