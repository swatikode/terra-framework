(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{1005:function(e,n){},1077:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M42.1 4H28V2a2 2 0 00-2-2h-4a2 2 0 00-2 2v2H5.9L5 11h38zM38 14H8.1l3.7 32a2.26 2.26 0 002.2 2h20a2.26 2.26 0 002.2-2l3.7-32z"}))};a.displayName="IconTrash",a.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1"};var r=a;n.default=r},1078:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M45.8 12c1.2 0 2.2 1 2.2 2.2v26.7c0 1.2-1 2.2-2.2 2.2H2.2C1 43 0 42 0 40.8V7.2C0 6 1 5 2.2 5H15c1.4.1 2.7.6 3.7 1.6l3.8 3.9c1 1 2.3 1.5 3.7 1.6l19.4-.1h.2z"}))};a.displayName="IconFolder",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg",isBidi:!0};var r=a;n.default=r},1093:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M39.8 12H35V1.7c0-.9-.8-1.7-1.7-1.7H8.7C7.8 0 7 .8 7 1.7V12H2.2C1 12 0 13 0 14.2v19.7C.1 35.1 1 36 2.2 36H7v10.3c0 .9.8 1.7 1.7 1.7h24.6c.9 0 1.7-.8 1.7-1.7V36h4.8c1.2 0 2.2-1 2.2-2.2V14.2c0-1.2-1-2.2-2.2-2.2zM10 3h22v9H10V3zm22 42H10V29.9h22V45zm3.2-24C34 21 33 20 33 18.8s1-2.2 2.2-2.2 2.2 1 2.2 2.2c0 1.2-1 2.2-2.2 2.2z"}))};a.displayName="IconPrinter",a.defaultProps={viewBox:"0 0 42 48",xmlns:"http://www.w3.org/2000/svg"};var r=a;n.default=r},1175:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M47.2 24.9c1-.5 1-1.3 0-1.8L28 13.5 25 12c-.7-.3-2.9-1.5-3.9-2L1.9.4C.8-.1 0 .4 0 1.5V19c0 1.2.9 2.2 2.1 2.3L30.3 24c1.1.1 1.1.3 0 .4L2.1 27C.9 27.1 0 28 0 29.2v17.2c-.1.6.3 1.2.9 1.3.3 0 .6 0 .9-.2L21.1 38l3-1.5c.7-.3 2.9-1.5 3.9-2l19.2-9.6z"}))};a.displayName="IconSend",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg",isBidi:!0};var r=a;n.default=r},1372:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M0 0v48h48V0zm31 9v10H18V9zm0 13v10H18V22zm3 0h11v10H34zm0-3V9h11v10zM3 9h12v10H3zm0 13h12v10H3zm0 23V35h12v10zm15 0V35h13v10zm16 0V35h11v10z"}))};a.displayName="IconTable",a.defaultProps={viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1"};var r=a;n.default=r},1373:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M0 0v48h48V0zm45 45H15V3h30z"}))};a.displayName="IconFlowsheet",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",isBidi:!0};var r=a;n.default=r},1374:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var l=s(t(0)),i=s(t(36));function s(e){return e&&e.__esModule?e:{default:e}}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}var a=function(e){var n=o({},e);return l.default.createElement(i.default,n,l.default.createElement("path",{d:"M48 8v16h-6v-5.7L25.31 35l-4.56-4.56L9.18 42H48v6H0V0h6v36.7l14.75-14.76 4.56 4.56L37.82 14H32V8z"}))};a.displayName="IconVisualization",a.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",isBidi:!0};var r=a;n.default=r},1849:function(e,n,t){"use strict";t.r(n),n.default='# Terra Collapsible Menu View\n\nThe collapsible menu view is a mechanism that can be used in toolbar scenarios where actionable items will be displayed face-up and flex based on the space available. Any items that can not fit in the available space will be rolled into an ellipsis menu.\n\nCollapsibleMenuView.Item will flex between a button when displayed face-up and a Menu.Item when in a menu. An item can have an onClick action and/or contain menuItems that will be displayed in a menu when clicked (they will be displayed in a submenu if the item is rolled into the ellipsis menu)\n\nCollapsibleMenuView.Toggle will flex between a checkbox with a label when displayed face-up and a selectable Menu.Item when in a menu.\n\nCollapsibleMenuView.ItemGroup will flex between a button group when displayed face-up and a Menu.ItemGroup when rolled into the ellipsis menu. A selectable ItemGroup will have toggle style selection. An Item group that is not slectable will have it\'s children roll into the ellipsis menu as non selectable Menu.Items.\n\nCollapsibleMenuView.Divider will flex between a vertical divider when displayed face-up and a Menu.Divider when in a menu.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-collapsible-menu-view`\n\n\x3c!-- AUTO-GENERATED-CONTENT:START Peer Dependencies --\x3e\n## Peer Dependencies\n\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\n\n| Peer Dependency | Version |\n|-|-|\n| react | ^16.8.5 |\n| react-dom | ^16.8.5 |\n| react-intl | ^2.8.0 |\n\n\x3c!-- AUTO-GENERATED-CONTENT:END --\x3e\n\n## Usage\n\n```jsx\nimport React from \'react\';\nimport IconTable from \'terra-icon/lib/icon/IconTable\';\nimport IconFlowsheet from \'terra-icon/lib/icon/IconFlowsheet\';\nimport IconVisualization from \'terra-icon/lib/icon/IconVisualization\';\nimport IconSend from \'terra-icon/lib/icon/IconSend\';\nimport IconPrinter from \'terra-icon/lib/icon/IconPrinter\';\nimport IconFolder from \'terra-icon/lib/icon/IconFolder\';\nimport IconTrash from \'terra-icon/lib/icon/IconTrash\';\nimport CollapsibleMenuView from \'terra-collapsible-menu-view\';\n\nclass CollapsibleMenuViewDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDisplayTypeChange = this.handleDisplayTypeChange.bind(this);\n    this.handleToggleOneOnChange = this.handleToggleOneOnChange.bind(this);\n    this.handleToggleTwoOnChange = this.handleToggleTwoOnChange.bind(this);\n    this.state = {\n      toggle1Selection: false,\n      toggle2Selection: false,\n      displayType: \'tableView\',\n    };\n  }\n\n  handleToggleOneOnChange(event, isSelected) {\n    this.setState({ toggle1Selection: isSelected });\n  }\n\n  handleToggleTwoOnChange(event, isSelected) {\n    this.setState({ toggle2Selection: isSelected });\n  }\n\n  handleDisplayTypeChange(event, selectedKey) {\n    this.setState({ displayType: selectedKey });\n  }\n\n  render() {\n    return (\n      <CollapsibleMenuView>\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 1"\n          key="toggle1"\n          onChange={this.handleToggleOneOnChange}\n          isSelected={this.state.toggle1Selection}\n        />\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 2"\n          key="toggle2"\n          onChange={this.handleToggleTwoOnChange}\n          isSelected={this.state.toggle2Selection}\n        />\n        <CollapsibleMenuView.Divider key="Divider1" />\n        <CollapsibleMenuView.Item\n          text="Menu Button 1"\n          key="MenuButton1"\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" />,\n          ]}\n        />\n        <CollapsibleMenuView.Item\n          text="Menu Button 2"\n          key="MenuButton 2"\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" />,\n          ]}\n        />\n        <CollapsibleMenuView.Divider key="Divider2" />\n        <CollapsibleMenuView.ItemGroup key="ViewTypeSelection" onChange={this.handleDisplayTypeChange}>\n          <CollapsibleMenuView.Item\n            icon={<IconTable />}\n            text="Table View"\n            key="tableView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'tableView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconFlowsheet />}\n            text="Expanded View"\n            key="expandedView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'expandedView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconVisualization />}\n            text="Trending View"\n            key="trendingView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'trendingView\'}\n          />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider3" />\n        <CollapsibleMenuView.Item icon={<IconSend />} text="Send Message" key="send" isIconOnly />\n        <CollapsibleMenuView.ItemGroup key="messageActionGroup">\n          <CollapsibleMenuView.Item icon={<IconPrinter />} text="Print Message" key="print" isIconOnly />\n          <CollapsibleMenuView.Item icon={<IconFolder />} text="Move Message to Folder..." key="move" isIconOnly />\n          <CollapsibleMenuView.Item icon={<IconTrash />} text="Trash Message" key="trash" isIconOnly />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider4" />\n        <CollapsibleMenuView.Item text="Button 1" key="button1" />\n        <CollapsibleMenuView.Item text="Button 2" key="button2" />\n        <CollapsibleMenuView.Item text="Button 3" key="button3" />\n        <CollapsibleMenuView.Item text="Button 4" key="button4" />\n      </CollapsibleMenuView>\n    );\n  }\n}\n\nexport default CollapsibleMenuViewDemo;\n```\n\n## Component Features\n\n\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n * [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n * [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\n'},1850:function(e){e.exports=JSON.parse('{"name":"terra-collapsible-menu-view","main":"lib/CollapsibleMenuView.js","version":"6.23.0","description":"The collapsible menu view is a mechanism that can be used in toolbar scenarios where actionable items will be displayed face-up and flex based on the space available. Any items that can not fit in the available space will be rolled into an ellipsis menu.","repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"keywords":["Cerner","Terra","terra-collapsible-menu-view","CollapsibleMenuView","UI"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"homepage":"https://github.com/cerner/terra-framework#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"dependencies":{"classnames":"^2.2.5","prop-types":"^15.5.8","resize-observer-polyfill":"^1.4.1","terra-button":"^3.3.0","terra-button-group":"^3.0.0","terra-form-checkbox":"^3.0.0","terra-list":"^4.0.0","terra-menu":"^6.23.0","terra-mixins":"^1.0.0"},"devDependencies":{"terra-doc-template":"^2.2.0","terra-icon":"^3.1.0"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","jest":"jest --config ../../jestconfig.js","wdio-default":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio-fusion":"cd ../.. && THEME=orion-fusion-theme npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio":"npm run wdio-default && npm run wdio-fusion"}}')},1851:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { FormattedMessage } from 'react-intl';\nimport CollapsibleMenuViewItem from './CollapsibleMenuViewItem';\nimport CollapsibleMenuViewItemGroup from './CollapsibleMenuViewItemGroup';\nimport CollapsibleMenuViewToggle from './CollapsibleMenuViewToggle';\nimport CollapsibleMenuViewDivider from './CollapsibleMenuViewDivider';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Item/ItemGroup/Divider elements to display in the view. Items that will fit in the space available will\n   * display face-up the remainder will be rolled into a menu\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A string representation of the width in px, limited to:\n   * 160, 240, 320, 640, 960, 1280, 1760, or auto\n   */\n  menuWidth: PropTypes.oneOf(Object.keys(CollapsibleMenuViewItem.Opts.widths)),\n\n  /**\n   * Bounding container for the menu, will use window if no value provided.\n   */\n  boundingRef: PropTypes.func,\n};\n\nclass CollapsibleMenuView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setContainer = this.setContainer.bind(this);\n    this.setMenuButton = this.setMenuButton.bind(this);\n    this.resetCache = this.resetCache.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n    this.resetCache();\n  }\n\n  componentDidMount() {\n    this.resizeObserver = new ResizeObserver((entries) => {\n      this.contentWidth = entries[0].contentRect.width;\n      if (!this.isCalculating) {\n        this.animationFrameID = window.requestAnimationFrame(() => {\n          // Resetting the cache so that all elements will be rendered face-up for width calculations\n          this.resetCache();\n          this.forceUpdate();\n        });\n      }\n    });\n    this.handleResize(this.contentWidth);\n    this.resizeObserver.observe(this.container);\n  }\n\n  componentDidUpdate() {\n    if (this.isCalculating) {\n      this.isCalculating = false;\n      this.handleResize(this.contentWidth);\n    }\n  }\n\n  componentWillUnmount() {\n    window.cancelAnimationFrame(this.animationFrameID);\n    this.resizeObserver.disconnect(this.container);\n    this.container = null;\n  }\n\n  setContainer(node) {\n    if (node === null) { return; } // Ref callbacks happen on mount and unmount, element will be null on unmount\n    this.container = node;\n  }\n\n  setMenuButton(node) {\n    if (node === null) { return; }\n    this.menuButton = node;\n  }\n\n  resetCache() {\n    this.animationFrameID = null;\n    this.hiddenStartIndex = -1;\n    this.isCalculating = true;\n    this.menuHidden = false;\n  }\n\n  handleResize(width) {\n    const menuButtonWidth = this.menuButton.getBoundingClientRect().width;\n    const availableWidth = width - menuButtonWidth;\n    let hiddenStartIndex = -1;\n    let calcWidth = 0;\n    let menuHidden = true;\n\n    for (let i = 0; i < React.Children.count(this.props.children); i += 1) {\n      const child = this.container.children[i];\n      const childWidth = child.getBoundingClientRect().width;\n      calcWidth += childWidth;\n\n      if (calcWidth > availableWidth) {\n        // If last child fits in the available space, leave it face up\n        if (i === this.props.children.length - 1 && calcWidth <= width) {\n          break;\n        }\n\n        // If divider is the last element to be hidden on collapse menu, leave it face up\n        if (React.Children.count(this.props.children) > 1 && this.props.children[i].type === CollapsibleMenuViewDivider) {\n          hiddenStartIndex = i - 1;\n        } else {\n          hiddenStartIndex = i;\n        }\n        menuHidden = false;\n        break;\n      }\n    }\n\n    if (this.menuHidden !== menuHidden || this.hiddenStartIndex !== hiddenStartIndex) {\n      this.menuHidden = menuHidden;\n      this.hiddenStartIndex = hiddenStartIndex;\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    const {\n      children, boundingRef, menuWidth, ...customProps\n    } = this.props;\n    const visibleChildren = React.Children.toArray(children);\n\n    let hiddenChildren = null;\n    if (this.hiddenStartIndex >= 0) {\n      hiddenChildren = visibleChildren.splice(this.hiddenStartIndex);\n    }\n\n    const collapsibleMenuViewClassName = cx([\n      'collapsible-menu-view',\n      { 'is-calculating': this.isCalculating },\n      customProps.className,\n    ]);\n    const menuButtonClassName = cx([\n      'menu-button',\n      { hidden: this.menuHidden },\n    ]);\n\n    return (\n      <div {...customProps} className={collapsibleMenuViewClassName} ref={this.setContainer}>\n        {visibleChildren}\n        <div className={menuButtonClassName} ref={this.setMenuButton}>\n          <FormattedMessage id=\"Terra.collapsibleMenuView.more\">\n            {ellipsesText => (\n              <CollapsibleMenuViewItem\n                data-collapsible-menu-toggle\n                icon={<span className={cx('menu-button-icon')} />}\n                subMenuItems={hiddenChildren}\n                boundingRef={boundingRef}\n                menuWidth={menuWidth}\n                isIconOnly\n                text={ellipsesText}\n                variant=\"utility\"\n              />\n            )}\n          </FormattedMessage>\n        </div>\n      </div>\n    );\n  }\n}\n\nCollapsibleMenuView.Item = CollapsibleMenuViewItem;\nCollapsibleMenuView.ItemGroup = CollapsibleMenuViewItemGroup;\nCollapsibleMenuView.Toggle = CollapsibleMenuViewToggle;\nCollapsibleMenuView.Divider = CollapsibleMenuViewDivider;\n\nCollapsibleMenuView.propTypes = propTypes;\n\nexport default CollapsibleMenuView;\n"},1852:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Button from 'terra-button';\nimport ButtonGroup from 'terra-button-group';\nimport Menu from './_CollapsibleMenu';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Sets the item's text\n   */\n  text: PropTypes.string.isRequired,\n\n  /**\n   * Bounding container for the menu, will use window if no value provided.\n   */\n  boundingRef: PropTypes.func,\n\n  /**\n  * An optional icon. Nested inline with the text when provided\n  */\n  icon: PropTypes.element,\n\n  /**\n   * Indicates if only the icon should display when item is face-up. (Text should still be given to be displayed when item is in the menu)\n   */\n  isIconOnly: PropTypes.bool,\n\n  /**\n  * Reverses the position of the icon and text\n  */\n  isReversed: PropTypes.bool,\n\n  /**\n   * Indicates if the item start as selected when placed in a button group\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Indicates if the item should be disabled.\n   */\n  isDisabled: PropTypes.bool,\n\n  /**\n   * Indicates that clicking on this item while displayed inside a menu should close the menu.\n   */\n  shouldCloseOnClick: PropTypes.bool,\n\n  /**\n   * List of Menu.Items to display in a submenu when this item is selected.\n   */\n  subMenuItems: PropTypes.arrayOf(PropTypes.element),\n\n  /**\n   * Callback function for when the item is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * A string representation of the width in px, limited to:\n   * 160, 240, 320, 640, 960, 1280, 1760, or auto\n   */\n  menuWidth: PropTypes.oneOf(Object.keys(Menu.Opts.widths)),\n};\n\nconst contextTypes = {\n  isCollapsibleGroupItem: PropTypes.bool,\n  isCollapsibleMenuItem: PropTypes.bool,\n};\n\nconst defaultProps = {\n  isSelected: false,\n  isReversed: false,\n  shouldCloseOnClick: true,\n  isIconOnly: false,\n};\n\nclass CollapsibleMenuViewItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setButtonNode = this.setButtonNode.bind(this);\n    this.getButtonNode = this.getButtonNode.bind(this);\n  }\n\n  setButtonNode(node) {\n    this.buttonNode = node;\n  }\n\n  getButtonNode() {\n    return this.buttonNode;\n  }\n\n  render() {\n    const {\n      icon,\n      isIconOnly,\n      isReversed,\n      text,\n      isSelected,\n      isDisabled,\n      subMenuItems,\n      shouldCloseOnClick,\n      boundingRef,\n      menuWidth,\n      ...customProps\n    } = this.props;\n\n    const { isCollapsibleGroupItem, isCollapsibleMenuItem } = this.context;\n    const attributes = { ...customProps };\n    let item;\n\n    if (isCollapsibleMenuItem) {\n      item = (\n        <Menu.Item\n          {...attributes}\n          text={text}\n          isSelected={isSelected && isCollapsibleGroupItem}\n          isDisabled={isDisabled}\n          subMenuItems={subMenuItems}\n        />\n      );\n    } else if (isCollapsibleGroupItem) {\n      item = (\n        <ButtonGroup.Button\n          {...attributes}\n          icon={icon}\n          text={text}\n          isDisabled={isDisabled}\n        />\n      );\n    } else if (subMenuItems && subMenuItems.length > 0) {\n      item = (\n        <Menu\n          contentWidth={menuWidth}\n          boundingRef={boundingRef}\n          button={(\n            <Button\n              {...attributes}\n              icon={icon}\n              text={text}\n              isReversed={isReversed}\n              isDisabled={isDisabled}\n              onClick={this.handleButtonClick}\n              isIconOnly={isIconOnly}\n            />\n          )}\n        >\n          {subMenuItems}\n        </Menu>\n      );\n    } else {\n      item = (\n        <div className={cx('face-up-item')}>\n          <Button\n            {...attributes}\n            icon={icon}\n            text={text}\n            isReversed={isReversed}\n            isDisabled={isDisabled}\n            isIconOnly={isIconOnly}\n          />\n        </div>\n      );\n    }\n\n    return item;\n  }\n}\n\nCollapsibleMenuViewItem.propTypes = propTypes;\nCollapsibleMenuViewItem.defaultProps = defaultProps;\nCollapsibleMenuViewItem.contextTypes = contextTypes;\nCollapsibleMenuViewItem.Opts = {\n  widths: Menu.Opts.widths,\n};\n\nexport default CollapsibleMenuViewItem;\n"},1853:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport ButtonGroup from 'terra-button-group';\nimport Menu from './_CollapsibleMenu';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Callback function that is called when the group's selection state changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * CollapsibleMenuView.Items to be grouped together\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * A list of keys of the CollapsibleMenuView.Items that should be selected.\n   */\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\n};\n\nconst defaultProps = {\n  selectedKeys: [],\n};\n\nconst childContextTypes = {\n  isCollapsibleGroupItem: PropTypes.bool,\n};\n\nconst contextTypes = {\n  isCollapsibleMenuItem: PropTypes.bool,\n};\n\nclass CollapsibleMenuViewItemGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n\n  getChildContext() {\n    return { isCollapsibleGroupItem: true };\n  }\n\n  handleOnChange(event, selectedIndex) {\n    if (this.props.onChange) {\n      let selectedKey = selectedIndex;\n      React.Children.forEach(this.props.children, (child, index) => {\n        if (selectedIndex === index) {\n          selectedKey = child.key;\n        }\n      });\n\n      this.props.onChange(event, selectedKey);\n    }\n  }\n\n  render() {\n    const {\n      children,\n      onChange,\n      selectedKeys,\n      ...customProps\n    } = this.props;\n\n    const { isCollapsibleMenuItem } = this.context;\n\n    if (isCollapsibleMenuItem && selectedKeys.length) {\n      return (\n        <li role=\"none\">\n          <Menu.ItemGroup {...customProps} onChange={this.handleOnChange}>\n            {children}\n          </Menu.ItemGroup>\n        </li>\n      );\n    } if (isCollapsibleMenuItem) {\n      return (\n        <div {...customProps}>\n          { children }\n        </div>\n      );\n    }\n\n    const buttonGroupClassNames = cx([\n      'face-up-item',\n      customProps.className,\n    ]);\n\n    return (\n      <ButtonGroup {...customProps} onChange={onChange} className={buttonGroupClassNames} selectedKeys={selectedKeys}>\n        {children}\n      </ButtonGroup>\n    );\n  }\n}\n\nCollapsibleMenuViewItemGroup.propTypes = propTypes;\nCollapsibleMenuViewItemGroup.defaultProps = defaultProps;\nCollapsibleMenuViewItemGroup.childContextTypes = childContextTypes;\nCollapsibleMenuViewItemGroup.contextTypes = contextTypes;\n\nexport default CollapsibleMenuViewItemGroup;\n"},1854:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Checkbox from 'terra-form-checkbox';\nimport Menu from './_CollapsibleMenu';\nimport styles from './CollapsibleMenuView.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * Sets the item's text\n   */\n  text: PropTypes.string.isRequired,\n  /**\n   * Indicates if the item is selected.\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * Callback function for when selection state changes. Is called with event and isSelected parameters\n   */\n  onChange: PropTypes.func,\n  /**\n   *  Indicates that the toggle should be selectable\n   */\n  isSelectable: PropTypes.bool,\n  /**\n   * Indicates if the toggle should be disabled.\n   */\n  isDisabled: PropTypes.bool,\n  /**\n   * Indicates that clicking on this item while displayed inside a menu should close the menu\n   */\n  shouldCloseOnClick: PropTypes.bool,\n};\n\nconst contextTypes = {\n  isCollapsibleMenuItem: PropTypes.bool,\n};\n\nconst defaultProps = {\n  isSelected: false,\n  isSelectable: true,\n  shouldCloseOnClick: true,\n};\n\nclass CollapsibleMenuViewToggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.wrappedOnChange = this.wrappedOnChange.bind(this);\n  }\n\n  // Wrapping onChange event so that the same parameters will be given when the display is a checkbox and a menu.item\n  wrappedOnChange(event) {\n    if (this.props.onChange) {\n      this.props.onChange(event, event.target.checked);\n    }\n  }\n\n  render() {\n    const {\n      text,\n      isSelected,\n      isSelectable,\n      isDisabled,\n      onChange,\n      shouldCloseOnClick,\n      ...customProps\n    } = this.props;\n\n    const { isCollapsibleMenuItem } = this.context;\n    const controllClassName = cx([\n      'control',\n      { 'is-disabled': isDisabled || !isSelectable },\n      customProps.className,\n    ]);\n\n    if (isCollapsibleMenuItem) {\n      return (\n        <Menu.Item\n          {...customProps}\n          text={text}\n          isSelected={isSelected}\n          isSelectable={isSelectable}\n          isDisabled={isDisabled}\n          onChange={onChange}\n        />\n      );\n    }\n\n    return (\n      <div className={cx(['face-up-item'])}>\n        <Checkbox\n          {...customProps}\n          className={controllClassName}\n          labelText={text}\n          defaultChecked={isSelected}\n          onChange={this.wrappedOnChange}\n          disabled={isDisabled || !isSelectable}\n        />\n      </div>\n    );\n  }\n}\n\nCollapsibleMenuViewToggle.propTypes = propTypes;\nCollapsibleMenuViewToggle.defaultProps = defaultProps;\nCollapsibleMenuViewToggle.contextTypes = contextTypes;\n\nexport default CollapsibleMenuViewToggle;\n"},1855:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(20)),s=l(t(22)),o=l(t(23)),a=l(t(24)),r=l(t(27)),u=l(t(25)),d=l(t(0)),c=l(t(1372)),p=l(t(1373)),m=l(t(1374)),h=l(t(1175)),b=l(t(1093)),f=l(t(1078)),g=l(t(1077)),y=l(t(1086)),C=function(e){function n(e){var t;return(0,i.default)(this,n),(t=(0,o.default)(this,(0,a.default)(n).call(this,e))).handleDisplayTypeChange=t.handleDisplayTypeChange.bind((0,r.default)(t)),t.handleToggleOneOnChange=t.handleToggleOneOnChange.bind((0,r.default)(t)),t.handleToggleTwoOnChange=t.handleToggleTwoOnChange.bind((0,r.default)(t)),t.state={toggle1Selection:!1,toggle2Selection:!1,displayType:"tableView"},t}return(0,u.default)(n,e),(0,s.default)(n,[{key:"handleToggleOneOnChange",value:function(e,n){this.setState({toggle1Selection:n})}},{key:"handleToggleTwoOnChange",value:function(e,n){this.setState({toggle2Selection:n})}},{key:"handleDisplayTypeChange",value:function(e,n){this.setState({displayType:n})}},{key:"render",value:function(){return d.default.createElement(y.default,null,d.default.createElement(y.default.Toggle,{text:"Toggle Item 1",key:"toggle1",shouldCloseOnClick:!1,onChange:this.handleToggleOneOnChange,isSelected:this.state.toggle1Selection,isSelectable:!1}),d.default.createElement(y.default.Toggle,{text:"Toggle Item 2",key:"toggle2",shouldCloseOnClick:!1,onChange:this.handleToggleTwoOnChange,isSelected:this.state.toggle2Selection,isDisabled:!0}),d.default.createElement(y.default.Divider,{key:"Divider1"}),d.default.createElement(y.default.Item,{text:"Menu Button 1",key:"MenuButton1",shouldCloseOnClick:!1,subMenuItems:[d.default.createElement(y.default.Item,{text:"Default Item 1",key:"defaultItem1"}),d.default.createElement(y.default.Item,{text:"Default Item 2",key:"defaultItem2"})]}),d.default.createElement(y.default.Item,{text:"Menu Button 2",key:"MenuButton 2",isDisabled:!0,shouldCloseOnClick:!1,subMenuItems:[d.default.createElement(y.default.Item,{text:"Default Item 1",key:"defaultItem1"}),d.default.createElement(y.default.Item,{text:"Default Item 2",key:"defaultItem2",isDisabled:!0})]}),d.default.createElement(y.default.Divider,{key:"Divider2"}),d.default.createElement(y.default.ItemGroup,{key:"ViewTypeSelection",selectedKeys:[this.state.displayType],onChange:this.handleDisplayTypeChange},d.default.createElement(y.default.Item,{icon:d.default.createElement(c.default,null),text:"Table View",key:"tableView",isIconOnly:!0,shouldCloseOnClick:!1,isSelected:"tableView"===this.state.displayType}),d.default.createElement(y.default.Item,{icon:d.default.createElement(p.default,null),text:"Expanded View",key:"expandedView",isIconOnly:!0,shouldCloseOnClick:!1,isSelected:"expandedView"===this.state.displayType}),d.default.createElement(y.default.Item,{icon:d.default.createElement(m.default,null),text:"Trending View",key:"trendingView",isIconOnly:!0,shouldCloseOnClick:!1,isSelected:"trendingView"===this.state.displayType,isDisabled:!0})),d.default.createElement(y.default.Divider,{key:"Divider3"}),d.default.createElement(y.default.Item,{icon:d.default.createElement(h.default,null),text:"Send Message",key:"send",isIconOnly:!0}),d.default.createElement(y.default.ItemGroup,{key:"messageActionGroup"},d.default.createElement(y.default.Item,{icon:d.default.createElement(b.default,null),text:"Print Message",key:"print",isIconOnly:!0}),d.default.createElement(y.default.Item,{icon:d.default.createElement(f.default,null),text:"Move Message to Folder...",key:"move",isIconOnly:!0,isDisabled:!0}),d.default.createElement(y.default.Item,{icon:d.default.createElement(g.default,null),text:"Trash Message",key:"trash",isIconOnly:!0})),d.default.createElement(y.default.Divider,{key:"Divider4"}),d.default.createElement(y.default.Item,{text:"Button 1",key:"button1"}),d.default.createElement(y.default.Item,{text:"Button 2",key:"button2",isDisabled:!0}),d.default.createElement(y.default.Item,{text:"Button 3",key:"button3"}),d.default.createElement(y.default.Item,{text:"Button 4",key:"button4"}))}}]),n}(d.default.Component);n.default=C},1860:function(e,n,t){"use strict";t.r(n),n.default='import React from \'react\';\nimport IconTable from \'terra-icon/lib/icon/IconTable\';\nimport IconFlowsheet from \'terra-icon/lib/icon/IconFlowsheet\';\nimport IconVisualization from \'terra-icon/lib/icon/IconVisualization\';\nimport IconSend from \'terra-icon/lib/icon/IconSend\';\nimport IconPrinter from \'terra-icon/lib/icon/IconPrinter\';\nimport IconFolder from \'terra-icon/lib/icon/IconFolder\';\nimport IconTrash from \'terra-icon/lib/icon/IconTrash\';\nimport CollapsibleMenuView from \'terra-collapsible-menu-view\';\n\nclass CollapsibleMenuViewDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDisplayTypeChange = this.handleDisplayTypeChange.bind(this);\n    this.handleToggleOneOnChange = this.handleToggleOneOnChange.bind(this);\n    this.handleToggleTwoOnChange = this.handleToggleTwoOnChange.bind(this);\n    this.state = {\n      toggle1Selection: false,\n      toggle2Selection: false,\n      displayType: \'tableView\',\n    };\n  }\n\n  handleToggleOneOnChange(event, isSelected) {\n    this.setState({ toggle1Selection: isSelected });\n  }\n\n  handleToggleTwoOnChange(event, isSelected) {\n    this.setState({ toggle2Selection: isSelected });\n  }\n\n  handleDisplayTypeChange(event, selectedKey) {\n    this.setState({ displayType: selectedKey });\n  }\n\n  render() {\n    return (\n      <CollapsibleMenuView>\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 1"\n          key="toggle1"\n          shouldCloseOnClick={false}\n          onChange={this.handleToggleOneOnChange}\n          isSelected={this.state.toggle1Selection}\n          isSelectable={false}\n        />\n        <CollapsibleMenuView.Toggle\n          text="Toggle Item 2"\n          key="toggle2"\n          shouldCloseOnClick={false}\n          onChange={this.handleToggleTwoOnChange}\n          isSelected={this.state.toggle2Selection}\n          isDisabled\n        />\n        <CollapsibleMenuView.Divider key="Divider1" />\n        <CollapsibleMenuView.Item\n          text="Menu Button 1"\n          key="MenuButton1"\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" />,\n          ]}\n        />\n        <CollapsibleMenuView.Item\n          text="Menu Button 2"\n          key="MenuButton 2"\n          isDisabled\n          shouldCloseOnClick={false}\n          subMenuItems={[\n            <CollapsibleMenuView.Item text="Default Item 1" key="defaultItem1" />,\n            <CollapsibleMenuView.Item text="Default Item 2" key="defaultItem2" isDisabled />,\n          ]}\n        />\n        <CollapsibleMenuView.Divider key="Divider2" />\n        <CollapsibleMenuView.ItemGroup key="ViewTypeSelection" selectedKeys={[this.state.displayType]} onChange={this.handleDisplayTypeChange}>\n          <CollapsibleMenuView.Item\n            icon={<IconTable />}\n            text="Table View"\n            key="tableView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'tableView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconFlowsheet />}\n            text="Expanded View"\n            key="expandedView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'expandedView\'}\n          />\n          <CollapsibleMenuView.Item\n            icon={<IconVisualization />}\n            text="Trending View"\n            key="trendingView"\n            isIconOnly\n            shouldCloseOnClick={false}\n            isSelected={this.state.displayType === \'trendingView\'}\n            isDisabled\n          />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider3" />\n        <CollapsibleMenuView.Item icon={<IconSend />} text="Send Message" key="send" isIconOnly />\n        <CollapsibleMenuView.ItemGroup key="messageActionGroup">\n          <CollapsibleMenuView.Item icon={<IconPrinter />} text="Print Message" key="print" isIconOnly />\n          <CollapsibleMenuView.Item icon={<IconFolder />} text="Move Message to Folder..." key="move" isIconOnly isDisabled />\n          <CollapsibleMenuView.Item icon={<IconTrash />} text="Trash Message" key="trash" isIconOnly />\n        </CollapsibleMenuView.ItemGroup>\n        <CollapsibleMenuView.Divider key="Divider4" />\n        <CollapsibleMenuView.Item text="Button 1" key="button1" />\n        <CollapsibleMenuView.Item text="Button 2" key="button2" isDisabled />\n        <CollapsibleMenuView.Item text="Button 3" key="button3" />\n        <CollapsibleMenuView.Item text="Button 4" key="button4" />\n      </CollapsibleMenuView>\n    );\n  }\n}\n\nexport default CollapsibleMenuViewDemo;\n'},2321:function(e,n,t){"use strict";var l=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=l(t(0)),s=l(t(1004)),o=l(t(1849)),a=t(1850),r=l(t(1851)),u=l(t(1852)),d=l(t(1853)),c=l(t(1854)),p=l(t(1855)),m=l(t(1860)),h=function(){return i.default.createElement(s.default,{packageName:a.name,readme:o.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(a.name),examples:[{title:"CollapsibleMenuView Example",example:i.default.createElement(p.default,null),source:m.default}],propsTables:[{componentName:"CollapsibleMenuView",componentSrc:r.default},{componentName:"CollapsibleMenuView.Item",componentSrc:u.default},{componentName:"CollapsibleMenuView.ItemGroup",componentSrc:d.default},{componentName:"CollapsibleMenuView.Toggle",componentSrc:c.default}]})};n.default=h}}]);
//# sourceMappingURL=91-ce451e5ac4f328ad4ad9.js.map