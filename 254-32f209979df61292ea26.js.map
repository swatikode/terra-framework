{"version":3,"sources":["webpack:///./packages/terra-navigation-prompt/docs/implementation-guide/IMPLEMENTATION_GUIDE_PART_0.md","webpack:///./packages/terra-navigation-prompt/lib/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart0.js","webpack:///./packages/terra-navigation-prompt/src/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart0.jsx","webpack:///./packages/terra-navigation-prompt/lib/terra-dev-site/doc/navigation-prompt/implementation-guide.1/Part0-ReviewingExample.1.doc.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","_slicedToArray2","_react","_propTypes","Form","_ref","title","ariaLabel","_useState","useState","_useState2","inputValue","setInputValue","createElement","type","onChange","event","target","onClick","propTypes","string","_default","_useState3","_useState4","activeForm","setActiveForm","onSwitchForm","formKey","disabled","bind","key","_terraDocTemplate","_IMPLEMENTATION_GUIDE_PART_","_ImplementationGuidePart","_ImplementationGuidePart2","packageName","srcPath","readme","examples","example","source"],"mappings":"kHAAA,OAAe,ovF,kCCEf,IAAIA,EAA0BC,EAAQ,IAElCC,EAAyBD,EAAQ,GAErCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAkBN,EAAuBD,EAAQ,KAEjDQ,EAAST,EAAwBC,EAAQ,IAEzCS,EAAaR,EAAuBD,EAAQ,IAE5CU,EAAO,SAAcC,GACvB,IAAIC,EAAQD,EAAKC,MACbC,EAAYF,EAAKE,UAEjBC,GAAY,EAAIN,EAAOO,UAAU,IACjCC,GAAa,EAAIT,EAAgBD,SAASQ,EAAW,GACrDG,EAAaD,EAAW,GACxBE,EAAgBF,EAAW,GAE/B,OAAOR,EAAOF,QAAQa,cAAc,MAAO,KAAMX,EAAOF,QAAQa,cAAc,IAAK,KAAMP,GAAQJ,EAAOF,QAAQa,cAAc,QAAS,CACrI,aAAcN,EACdO,KAAM,OACNC,SAAU,SAAkBC,GAC1BJ,EAAcI,EAAMC,OAAOlB,QAE7BA,MAAOY,IACLT,EAAOF,QAAQa,cAAc,SAAU,CACzCC,KAAM,SACNI,QAAS,WACPN,EAAc,MAEf,YAGLR,EAAKe,UAAY,CACfb,MAAOH,EAAWH,QAAQoB,OAC1Bb,UAAWJ,EAAWH,QAAQoB,QAGhC,IAyBIC,EAzBe,WACjB,IAAIC,GAAa,EAAIpB,EAAOO,UAAU,UAClCc,GAAa,EAAItB,EAAgBD,SAASsB,EAAY,GACtDE,EAAaD,EAAW,GACxBE,EAAgBF,EAAW,GAE/B,SAASG,EAAaC,GACpBF,EAAcE,GAGhB,OAAOzB,EAAOF,QAAQa,cAAc,MAAO,KAAMX,EAAOF,QAAQa,cAAc,KAAM,KAAM,iBAAkBX,EAAOF,QAAQa,cAAc,IAAK,KAAM,oEAAqEX,EAAOF,QAAQa,cAAc,SAAU,CAC9PC,KAAM,SACNc,SAAyB,WAAfJ,EACVN,QAASQ,EAAaG,KAAK,KAAM,WAChC,oBAAqB3B,EAAOF,QAAQa,cAAc,SAAU,CAC7DC,KAAM,SACNc,SAAyB,WAAfJ,EACVN,QAASQ,EAAaG,KAAK,KAAM,WAChC,oBAAqB3B,EAAOF,QAAQa,cAAcT,EAAM,CACzDE,MAAOkB,EACPM,IAAKN,EACLjB,UAAWiB,MAKf1B,EAAQE,QAAUqB,G,kCCxElB,OAAe,09C,kCCEf,IAAI1B,EAAyBD,EAAQ,GAErCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIE,EAASP,EAAuBD,EAAQ,IAExCqC,EAAoBpC,EAAuBD,EAAQ,OAEnDsC,EAA8BrC,EAAuBD,EAAQ,OAE7DuC,EAA2BtC,EAAuBD,EAAQ,OAE1DwC,EAA4BvC,EAAuBD,EAAQ,OAgB3D2B,EAb0B,WAC5B,OAAOnB,EAAOF,QAAQa,cAAckB,EAAkB/B,QAAS,CAC7DmC,YAAa,0BACbC,QAAS,yFACTC,OAAQL,EAA4BhC,QACpCsC,SAAU,CAAC,CACThC,MAAO,6DACPiC,QAASrC,EAAOF,QAAQa,cAAcoB,EAAyBjC,QAAS,MACxEwC,OAAQN,EAA0BlC,aAMxCF,EAAQE,QAAUqB","file":"254-32f209979df61292ea26.js","sourcesContent":["export default \"# Terra Navigation Prompt - Implementation Guide\\n\\nAssume we have built a simple component, the FormSwitcher, that toggles between showing two different stateful components, Form 1 and Form 2. Users of the FormSwitcher have recently complained that they can switch between forms before submitting their in progress form, losing their data in the process. We want to implement the NavigationPrompt and NavigationPromptCheckpoint to give our users more control over the FormSwitcher's navigation.\\n\\n> Note: This implementation guide features examples and use cases for the various APIs provided by the NavigationPrompt and NavigationPromptCheckpoint.\\n> !! Please review your individual requirements to see which APIs are necessary for your specific needs.\\n\\n## Part 0 - Reviewing the Initial FormSwitcher Implementation\\n\\nThe FormSwitcher renders two buttons that allow users to toggle between showing Form 1 and Form 2. Form 1 and Form 2 are unique instances of the Form component.\\n\\nThe Form component renders a text input element and keeps the input's value in state. When the Submit button is pressed, the value is reset to simulate a mock submission.\\n\\nIf we enter text into Form 1's input, switch to Form 2, and then switch back to Form 1, we will notice our previously entered value is gone. This is not good, because that data in Form 1 could be *very* important to our users.\\n\\n```jsx\\nimport React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\n\\nconst Form = ({ title }) => {\\n  const [inputValue, setInputValue] = useState('');\\n\\n  return (\\n    <div>\\n      <p>{title}</p>\\n      <input\\n        type=\\\"text\\\"\\n        onChange={(event) => {\\n          setInputValue(event.target.value);\\n        }}\\n        value={inputValue}\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setInputValue('');\\n        }}\\n      >\\n        Submit\\n      </button>\\n    </div>\\n  );\\n};\\n\\nForm.propTypes = {\\n  title: PropTypes.string,\\n};\\n\\nconst FormSwitcher = () => {\\n  const [activeForm, setActiveForm] = useState('Form 1');\\n\\n  function onSwitchForm(formKey) {\\n    setActiveForm(formKey);\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Form Switcher</h2>\\n      <p>The NavigationPrompt is not implemented, so no prompting occurs.</p>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 1'}\\n        onClick={onSwitchForm.bind(null, 'Form 1')}\\n      >\\n        Switch to Form 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 2'}\\n        onClick={onSwitchForm.bind(null, 'Form 2')}\\n      >\\n        Switch to Form 2\\n      </button>\\n      <Form title={activeForm} key={activeForm} />\\n    </div>\\n  );\\n};\\n\\nexport default FormSwitcher;\\n```\\n\"","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar Form = function Form(_ref) {\n  var title = _ref.title,\n      ariaLabel = _ref.ariaLabel;\n\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, title), _react.default.createElement(\"input\", {\n    \"aria-label\": ariaLabel,\n    type: \"text\",\n    onChange: function onChange(event) {\n      setInputValue(event.target.value);\n    },\n    value: inputValue\n  }), _react.default.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      setInputValue('');\n    }\n  }, \"Submit\"));\n};\n\nForm.propTypes = {\n  title: _propTypes.default.string,\n  ariaLabel: _propTypes.default.string\n};\n\nvar FormSwitcher = function FormSwitcher() {\n  var _useState3 = (0, _react.useState)('Form 1'),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      activeForm = _useState4[0],\n      setActiveForm = _useState4[1];\n\n  function onSwitchForm(formKey) {\n    setActiveForm(formKey);\n  }\n\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"h2\", null, \"Form Switcher\"), _react.default.createElement(\"p\", null, \"The NavigationPrompt is not implemented, so no prompting occurs.\"), _react.default.createElement(\"button\", {\n    type: \"button\",\n    disabled: activeForm === 'Form 1',\n    onClick: onSwitchForm.bind(null, 'Form 1')\n  }, \"Switch to Form 1\"), _react.default.createElement(\"button\", {\n    type: \"button\",\n    disabled: activeForm === 'Form 2',\n    onClick: onSwitchForm.bind(null, 'Form 2')\n  }, \"Switch to Form 2\"), _react.default.createElement(Form, {\n    title: activeForm,\n    key: activeForm,\n    ariaLabel: activeForm\n  }));\n};\n\nvar _default = FormSwitcher;\nexports.default = _default;","export default \"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\n\\nconst Form = ({ title, ariaLabel }) => {\\n  const [inputValue, setInputValue] = useState('');\\n\\n  return (\\n    <div>\\n      <p>{title}</p>\\n      <input\\n        aria-label={ariaLabel}\\n        type=\\\"text\\\"\\n        onChange={(event) => {\\n          setInputValue(event.target.value);\\n        }}\\n        value={inputValue}\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setInputValue('');\\n        }}\\n      >\\n        Submit\\n      </button>\\n    </div>\\n  );\\n};\\n\\nForm.propTypes = {\\n  title: PropTypes.string,\\n  ariaLabel: PropTypes.string,\\n};\\n\\nconst FormSwitcher = () => {\\n  const [activeForm, setActiveForm] = useState('Form 1');\\n\\n  function onSwitchForm(formKey) {\\n    setActiveForm(formKey);\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Form Switcher</h2>\\n      <p>The NavigationPrompt is not implemented, so no prompting occurs.</p>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 1'}\\n        onClick={onSwitchForm.bind(null, 'Form 1')}\\n\\n      >\\n        Switch to Form 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 2'}\\n        onClick={onSwitchForm.bind(null, 'Form 2')}\\n      >\\n        Switch to Form 2\\n      </button>\\n      <Form title={activeForm} key={activeForm} ariaLabel={activeForm} />\\n    </div>\\n  );\\n};\\n\\nexport default FormSwitcher;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _IMPLEMENTATION_GUIDE_PART_ = _interopRequireDefault(require(\"../../../../../docs/implementation-guide/IMPLEMENTATION_GUIDE_PART_0.md\"));\n\nvar _ImplementationGuidePart = _interopRequireDefault(require(\"../examples/ImplementationGuidePart0\"));\n\nvar _ImplementationGuidePart2 = _interopRequireDefault(require(\"!raw-loader!../../../../../src/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart0\"));\n\n// Example Files\nvar ImplementationGuidePage = function ImplementationGuidePage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: \"terra-navigation-prompt\",\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/terra-navigation-prompt\",\n    readme: _IMPLEMENTATION_GUIDE_PART_.default,\n    examples: [{\n      title: 'Part 0 - Reviewing the Initial FormSwitcher Implementation',\n      example: _react.default.createElement(_ImplementationGuidePart.default, null),\n      source: _ImplementationGuidePart2.default\n    }]\n  });\n};\n\nvar _default = ImplementationGuidePage;\nexports.default = _default;"],"sourceRoot":""}