{"version":3,"sources":["webpack:///./node_modules/terra-icon/lib/icon/IconTrash.js","webpack:///./node_modules/terra-icon/lib/icon/IconFolder.js","webpack:///./node_modules/terra-icon/lib/icon/IconPrinter.js","webpack:///./node_modules/terra-icon/lib/icon/IconSend.js","webpack:///./node_modules/terra-icon/lib/icon/IconTable.js","webpack:///./node_modules/terra-icon/lib/icon/IconFlowsheet.js","webpack:///./node_modules/terra-icon/lib/icon/IconVisualization.js","webpack:///./packages/terra-collapsible-menu-view/docs/README.md","webpack:///./packages/terra-collapsible-menu-view/src/CollapsibleMenuView.jsx","webpack:///./packages/terra-collapsible-menu-view/src/CollapsibleMenuViewItem.jsx","webpack:///./packages/terra-collapsible-menu-view/src/CollapsibleMenuViewItemGroup.jsx","webpack:///./packages/terra-collapsible-menu-view/src/CollapsibleMenuViewToggle.jsx","webpack:///./packages/terra-collapsible-menu-view/lib/terra-dev-site/doc/example/CollapsibleMenuViewDemo.js","webpack:///./packages/terra-collapsible-menu-view/src/terra-dev-site/doc/example/CollapsibleMenuViewDemo.jsx","webpack:///./packages/terra-collapsible-menu-view/lib/terra-dev-site/doc/collapsible-menu-view/CollapsibleMenuView.1.doc.js"],"names":["Object","defineProperty","exports","value","default","_react","_interopRequireDefault","_IconBase","obj","__esModule","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgIcon","customProps","attributes","createElement","d","displayName","defaultProps","_default","require","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_IconTable","_IconFlowsheet","_IconVisualization","_IconSend","_IconPrinter","_IconFolder","_IconTrash","_terraCollapsibleMenuView","_React$Component","CollapsibleMenuViewDemo","props","_this","handleDisplayTypeChange","bind","handleToggleOneOnChange","handleToggleTwoOnChange","state","toggle1Selection","toggle2Selection","displayType","event","isSelected","setState","selectedKey","Toggle","text","shouldCloseOnClick","onChange","isSelectable","isDisabled","Divider","Item","subMenuItems","ItemGroup","selectedKeys","icon","isIconOnly","Component","_terraDocTemplate","_README","_package","_CollapsibleMenuView","_CollapsibleMenuViewItem","_CollapsibleMenuViewItemGroup","_CollapsibleMenuViewToggle","_CollapsibleMenuViewDemo","_CollapsibleMenuViewDemo2","packageName","name","readme","srcPath","concat","examples","title","example","propsTables","componentName","componentSrc"],"mappings":"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","file":"91-ce451e5ac4f328ad4ad9.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M42.1 4H28V2a2 2 0 00-2-2h-4a2 2 0 00-2 2v2H5.9L5 11h38zM38 14H8.1l3.7 32a2.26 2.26 0 002.2 2h20a2.26 2.26 0 002.2-2l3.7-32z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconTrash\";\nSvgIcon.defaultProps = {\n  \"viewBox\": \"0 0 48 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\",\n  \"data-name\": \"Layer 1\"\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M45.8 12c1.2 0 2.2 1 2.2 2.2v26.7c0 1.2-1 2.2-2.2 2.2H2.2C1 43 0 42 0 40.8V7.2C0 6 1 5 2.2 5H15c1.4.1 2.7.6 3.7 1.6l3.8 3.9c1 1 2.3 1.5 3.7 1.6l19.4-.1h.2z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconFolder\";\nSvgIcon.defaultProps = {\n  \"className\": \"\",\n  \"viewBox\": \"0 0 48 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\",\n  \"isBidi\": true\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M39.8 12H35V1.7c0-.9-.8-1.7-1.7-1.7H8.7C7.8 0 7 .8 7 1.7V12H2.2C1 12 0 13 0 14.2v19.7C.1 35.1 1 36 2.2 36H7v10.3c0 .9.8 1.7 1.7 1.7h24.6c.9 0 1.7-.8 1.7-1.7V36h4.8c1.2 0 2.2-1 2.2-2.2V14.2c0-1.2-1-2.2-2.2-2.2zM10 3h22v9H10V3zm22 42H10V29.9h22V45zm3.2-24C34 21 33 20 33 18.8s1-2.2 2.2-2.2 2.2 1 2.2 2.2c0 1.2-1 2.2-2.2 2.2z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconPrinter\";\nSvgIcon.defaultProps = {\n  \"viewBox\": \"0 0 42 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\"\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M47.2 24.9c1-.5 1-1.3 0-1.8L28 13.5 25 12c-.7-.3-2.9-1.5-3.9-2L1.9.4C.8-.1 0 .4 0 1.5V19c0 1.2.9 2.2 2.1 2.3L30.3 24c1.1.1 1.1.3 0 .4L2.1 27C.9 27.1 0 28 0 29.2v17.2c-.1.6.3 1.2.9 1.3.3 0 .6 0 .9-.2L21.1 38l3-1.5c.7-.3 2.9-1.5 3.9-2l19.2-9.6z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconSend\";\nSvgIcon.defaultProps = {\n  \"className\": \"\",\n  \"viewBox\": \"0 0 48 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\",\n  \"isBidi\": true\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M0 0v48h48V0zm31 9v10H18V9zm0 13v10H18V22zm3 0h11v10H34zm0-3V9h11v10zM3 9h12v10H3zm0 13h12v10H3zm0 23V35h12v10zm15 0V35h13v10zm16 0V35h11v10z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconTable\";\nSvgIcon.defaultProps = {\n  \"viewBox\": \"0 0 48 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\",\n  \"data-name\": \"Layer 1\"\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M0 0v48h48V0zm45 45H15V3h30z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconFlowsheet\";\nSvgIcon.defaultProps = {\n  \"className\": \"\",\n  \"viewBox\": \"0 0 48 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\",\n  \"data-name\": \"Layer 1\",\n  \"isBidi\": true\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconBase = _interopRequireDefault(require(\"../IconBase\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgIcon = function SvgIcon(customProps) {\n  var attributes = _extends({}, customProps);\n\n  return _react.default.createElement(_IconBase.default, attributes, _react.default.createElement(\"path\", {\n    d: \"M48 8v16h-6v-5.7L25.31 35l-4.56-4.56L9.18 42H48v6H0V0h6v36.7l14.75-14.76 4.56 4.56L37.82 14H32V8z\"\n  }));\n};\n\nSvgIcon.displayName = \"IconVisualization\";\nSvgIcon.defaultProps = {\n  \"className\": \"\",\n  \"viewBox\": \"0 0 48 48\",\n  \"xmlns\": \"http://www.w3.org/2000/svg\",\n  \"data-name\": \"Layer 1\",\n  \"isBidi\": true\n};\nvar _default = SvgIcon;\n/* eslint-enable */\n\nexports.default = _default;","export default \"# Terra Collapsible Menu View\\n\\nThe collapsible menu view is a mechanism that can be used in toolbar scenarios where actionable items will be displayed face-up and flex based on the space available. Any items that can not fit in the available space will be rolled into an ellipsis menu.\\n\\nCollapsibleMenuView.Item will flex between a button when displayed face-up and a Menu.Item when in a menu. An item can have an onClick action and/or contain menuItems that will be displayed in a menu when clicked (they will be displayed in a submenu if the item is rolled into the ellipsis menu)\\n\\nCollapsibleMenuView.Toggle will flex between a checkbox with a label when displayed face-up and a selectable Menu.Item when in a menu.\\n\\nCollapsibleMenuView.ItemGroup will flex between a button group when displayed face-up and a Menu.ItemGroup when rolled into the ellipsis menu. A selectable ItemGroup will have toggle style selection. An Item group that is not slectable will have it's children roll into the ellipsis menu as non selectable Menu.Items.\\n\\nCollapsibleMenuView.Divider will flex between a vertical divider when displayed face-up and a Menu.Divider when in a menu.\\n\\n## Getting Started\\n\\n- Install with [npmjs](https://www.npmjs.com):\\n  - `npm install terra-collapsible-menu-view`\\n\\n<!-- AUTO-GENERATED-CONTENT:START Peer Dependencies -->\\n## Peer Dependencies\\n\\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\\n\\n| Peer Dependency | Version |\\n|-|-|\\n| react | ^16.8.5 |\\n| react-dom | ^16.8.5 |\\n| react-intl | ^2.8.0 |\\n\\n<!-- AUTO-GENERATED-CONTENT:END -->\\n\\n## Usage\\n\\n```jsx\\nimport React from 'react';\\nimport IconTable from 'terra-icon/lib/icon/IconTable';\\nimport IconFlowsheet from 'terra-icon/lib/icon/IconFlowsheet';\\nimport IconVisualization from 'terra-icon/lib/icon/IconVisualization';\\nimport IconSend from 'terra-icon/lib/icon/IconSend';\\nimport IconPrinter from 'terra-icon/lib/icon/IconPrinter';\\nimport IconFolder from 'terra-icon/lib/icon/IconFolder';\\nimport IconTrash from 'terra-icon/lib/icon/IconTrash';\\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\\n\\nclass CollapsibleMenuViewDemo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.handleDisplayTypeChange = this.handleDisplayTypeChange.bind(this);\\n    this.handleToggleOneOnChange = this.handleToggleOneOnChange.bind(this);\\n    this.handleToggleTwoOnChange = this.handleToggleTwoOnChange.bind(this);\\n    this.state = {\\n      toggle1Selection: false,\\n      toggle2Selection: false,\\n      displayType: 'tableView',\\n    };\\n  }\\n\\n  handleToggleOneOnChange(event, isSelected) {\\n    this.setState({ toggle1Selection: isSelected });\\n  }\\n\\n  handleToggleTwoOnChange(event, isSelected) {\\n    this.setState({ toggle2Selection: isSelected });\\n  }\\n\\n  handleDisplayTypeChange(event, selectedKey) {\\n    this.setState({ displayType: selectedKey });\\n  }\\n\\n  render() {\\n    return (\\n      <CollapsibleMenuView>\\n        <CollapsibleMenuView.Toggle\\n          text=\\\"Toggle Item 1\\\"\\n          key=\\\"toggle1\\\"\\n          onChange={this.handleToggleOneOnChange}\\n          isSelected={this.state.toggle1Selection}\\n        />\\n        <CollapsibleMenuView.Toggle\\n          text=\\\"Toggle Item 2\\\"\\n          key=\\\"toggle2\\\"\\n          onChange={this.handleToggleTwoOnChange}\\n          isSelected={this.state.toggle2Selection}\\n        />\\n        <CollapsibleMenuView.Divider key=\\\"Divider1\\\" />\\n        <CollapsibleMenuView.Item\\n          text=\\\"Menu Button 1\\\"\\n          key=\\\"MenuButton1\\\"\\n          shouldCloseOnClick={false}\\n          subMenuItems={[\\n            <CollapsibleMenuView.Item text=\\\"Default Item 1\\\" key=\\\"defaultItem1\\\" />,\\n            <CollapsibleMenuView.Item text=\\\"Default Item 2\\\" key=\\\"defaultItem2\\\" />,\\n          ]}\\n        />\\n        <CollapsibleMenuView.Item\\n          text=\\\"Menu Button 2\\\"\\n          key=\\\"MenuButton 2\\\"\\n          shouldCloseOnClick={false}\\n          subMenuItems={[\\n            <CollapsibleMenuView.Item text=\\\"Default Item 1\\\" key=\\\"defaultItem1\\\" />,\\n            <CollapsibleMenuView.Item text=\\\"Default Item 2\\\" key=\\\"defaultItem2\\\" />,\\n          ]}\\n        />\\n        <CollapsibleMenuView.Divider key=\\\"Divider2\\\" />\\n        <CollapsibleMenuView.ItemGroup key=\\\"ViewTypeSelection\\\" onChange={this.handleDisplayTypeChange}>\\n          <CollapsibleMenuView.Item\\n            icon={<IconTable />}\\n            text=\\\"Table View\\\"\\n            key=\\\"tableView\\\"\\n            isIconOnly\\n            shouldCloseOnClick={false}\\n            isSelected={this.state.displayType === 'tableView'}\\n          />\\n          <CollapsibleMenuView.Item\\n            icon={<IconFlowsheet />}\\n            text=\\\"Expanded View\\\"\\n            key=\\\"expandedView\\\"\\n            isIconOnly\\n            shouldCloseOnClick={false}\\n            isSelected={this.state.displayType === 'expandedView'}\\n          />\\n          <CollapsibleMenuView.Item\\n            icon={<IconVisualization />}\\n            text=\\\"Trending View\\\"\\n            key=\\\"trendingView\\\"\\n            isIconOnly\\n            shouldCloseOnClick={false}\\n            isSelected={this.state.displayType === 'trendingView'}\\n          />\\n        </CollapsibleMenuView.ItemGroup>\\n        <CollapsibleMenuView.Divider key=\\\"Divider3\\\" />\\n        <CollapsibleMenuView.Item icon={<IconSend />} text=\\\"Send Message\\\" key=\\\"send\\\" isIconOnly />\\n        <CollapsibleMenuView.ItemGroup key=\\\"messageActionGroup\\\">\\n          <CollapsibleMenuView.Item icon={<IconPrinter />} text=\\\"Print Message\\\" key=\\\"print\\\" isIconOnly />\\n          <CollapsibleMenuView.Item icon={<IconFolder />} text=\\\"Move Message to Folder...\\\" key=\\\"move\\\" isIconOnly />\\n          <CollapsibleMenuView.Item icon={<IconTrash />} text=\\\"Trash Message\\\" key=\\\"trash\\\" isIconOnly />\\n        </CollapsibleMenuView.ItemGroup>\\n        <CollapsibleMenuView.Divider key=\\\"Divider4\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 1\\\" key=\\\"button1\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 2\\\" key=\\\"button2\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 3\\\" key=\\\"button3\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 4\\\" key=\\\"button4\\\" />\\n      </CollapsibleMenuView>\\n    );\\n  }\\n}\\n\\nexport default CollapsibleMenuViewDemo;\\n```\\n\\n## Component Features\\n\\n\\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\\n * [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\\n * [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)\\n\"","export default \"import React from 'react';\\nimport ResizeObserver from 'resize-observer-polyfill';\\nimport PropTypes from 'prop-types';\\nimport classNames from 'classnames/bind';\\nimport { FormattedMessage } from 'react-intl';\\nimport CollapsibleMenuViewItem from './CollapsibleMenuViewItem';\\nimport CollapsibleMenuViewItemGroup from './CollapsibleMenuViewItemGroup';\\nimport CollapsibleMenuViewToggle from './CollapsibleMenuViewToggle';\\nimport CollapsibleMenuViewDivider from './CollapsibleMenuViewDivider';\\nimport styles from './CollapsibleMenuView.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   * Item/ItemGroup/Divider elements to display in the view. Items that will fit in the space available will\\n   * display face-up the remainder will be rolled into a menu\\n   */\\n  children: PropTypes.node.isRequired,\\n\\n  /**\\n   * A string representation of the width in px, limited to:\\n   * 160, 240, 320, 640, 960, 1280, 1760, or auto\\n   */\\n  menuWidth: PropTypes.oneOf(Object.keys(CollapsibleMenuViewItem.Opts.widths)),\\n\\n  /**\\n   * Bounding container for the menu, will use window if no value provided.\\n   */\\n  boundingRef: PropTypes.func,\\n};\\n\\nclass CollapsibleMenuView extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.setContainer = this.setContainer.bind(this);\\n    this.setMenuButton = this.setMenuButton.bind(this);\\n    this.resetCache = this.resetCache.bind(this);\\n    this.handleResize = this.handleResize.bind(this);\\n    this.resetCache();\\n  }\\n\\n  componentDidMount() {\\n    this.resizeObserver = new ResizeObserver((entries) => {\\n      this.contentWidth = entries[0].contentRect.width;\\n      if (!this.isCalculating) {\\n        this.animationFrameID = window.requestAnimationFrame(() => {\\n          // Resetting the cache so that all elements will be rendered face-up for width calculations\\n          this.resetCache();\\n          this.forceUpdate();\\n        });\\n      }\\n    });\\n    this.handleResize(this.contentWidth);\\n    this.resizeObserver.observe(this.container);\\n  }\\n\\n  componentDidUpdate() {\\n    if (this.isCalculating) {\\n      this.isCalculating = false;\\n      this.handleResize(this.contentWidth);\\n    }\\n  }\\n\\n  componentWillUnmount() {\\n    window.cancelAnimationFrame(this.animationFrameID);\\n    this.resizeObserver.disconnect(this.container);\\n    this.container = null;\\n  }\\n\\n  setContainer(node) {\\n    if (node === null) { return; } // Ref callbacks happen on mount and unmount, element will be null on unmount\\n    this.container = node;\\n  }\\n\\n  setMenuButton(node) {\\n    if (node === null) { return; }\\n    this.menuButton = node;\\n  }\\n\\n  resetCache() {\\n    this.animationFrameID = null;\\n    this.hiddenStartIndex = -1;\\n    this.isCalculating = true;\\n    this.menuHidden = false;\\n  }\\n\\n  handleResize(width) {\\n    const menuButtonWidth = this.menuButton.getBoundingClientRect().width;\\n    const availableWidth = width - menuButtonWidth;\\n    let hiddenStartIndex = -1;\\n    let calcWidth = 0;\\n    let menuHidden = true;\\n\\n    for (let i = 0; i < React.Children.count(this.props.children); i += 1) {\\n      const child = this.container.children[i];\\n      const childWidth = child.getBoundingClientRect().width;\\n      calcWidth += childWidth;\\n\\n      if (calcWidth > availableWidth) {\\n        // If last child fits in the available space, leave it face up\\n        if (i === this.props.children.length - 1 && calcWidth <= width) {\\n          break;\\n        }\\n\\n        // If divider is the last element to be hidden on collapse menu, leave it face up\\n        if (React.Children.count(this.props.children) > 1 && this.props.children[i].type === CollapsibleMenuViewDivider) {\\n          hiddenStartIndex = i - 1;\\n        } else {\\n          hiddenStartIndex = i;\\n        }\\n        menuHidden = false;\\n        break;\\n      }\\n    }\\n\\n    if (this.menuHidden !== menuHidden || this.hiddenStartIndex !== hiddenStartIndex) {\\n      this.menuHidden = menuHidden;\\n      this.hiddenStartIndex = hiddenStartIndex;\\n      this.forceUpdate();\\n    }\\n  }\\n\\n  render() {\\n    const {\\n      children, boundingRef, menuWidth, ...customProps\\n    } = this.props;\\n    const visibleChildren = React.Children.toArray(children);\\n\\n    let hiddenChildren = null;\\n    if (this.hiddenStartIndex >= 0) {\\n      hiddenChildren = visibleChildren.splice(this.hiddenStartIndex);\\n    }\\n\\n    const collapsibleMenuViewClassName = cx([\\n      'collapsible-menu-view',\\n      { 'is-calculating': this.isCalculating },\\n      customProps.className,\\n    ]);\\n    const menuButtonClassName = cx([\\n      'menu-button',\\n      { hidden: this.menuHidden },\\n    ]);\\n\\n    return (\\n      <div {...customProps} className={collapsibleMenuViewClassName} ref={this.setContainer}>\\n        {visibleChildren}\\n        <div className={menuButtonClassName} ref={this.setMenuButton}>\\n          <FormattedMessage id=\\\"Terra.collapsibleMenuView.more\\\">\\n            {ellipsesText => (\\n              <CollapsibleMenuViewItem\\n                data-collapsible-menu-toggle\\n                icon={<span className={cx('menu-button-icon')} />}\\n                subMenuItems={hiddenChildren}\\n                boundingRef={boundingRef}\\n                menuWidth={menuWidth}\\n                isIconOnly\\n                text={ellipsesText}\\n                variant=\\\"utility\\\"\\n              />\\n            )}\\n          </FormattedMessage>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nCollapsibleMenuView.Item = CollapsibleMenuViewItem;\\nCollapsibleMenuView.ItemGroup = CollapsibleMenuViewItemGroup;\\nCollapsibleMenuView.Toggle = CollapsibleMenuViewToggle;\\nCollapsibleMenuView.Divider = CollapsibleMenuViewDivider;\\n\\nCollapsibleMenuView.propTypes = propTypes;\\n\\nexport default CollapsibleMenuView;\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport classNames from 'classnames/bind';\\nimport Button from 'terra-button';\\nimport ButtonGroup from 'terra-button-group';\\nimport Menu from './_CollapsibleMenu';\\nimport styles from './CollapsibleMenuView.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   * Sets the item's text\\n   */\\n  text: PropTypes.string.isRequired,\\n\\n  /**\\n   * Bounding container for the menu, will use window if no value provided.\\n   */\\n  boundingRef: PropTypes.func,\\n\\n  /**\\n  * An optional icon. Nested inline with the text when provided\\n  */\\n  icon: PropTypes.element,\\n\\n  /**\\n   * Indicates if only the icon should display when item is face-up. (Text should still be given to be displayed when item is in the menu)\\n   */\\n  isIconOnly: PropTypes.bool,\\n\\n  /**\\n  * Reverses the position of the icon and text\\n  */\\n  isReversed: PropTypes.bool,\\n\\n  /**\\n   * Indicates if the item start as selected when placed in a button group\\n   */\\n  isSelected: PropTypes.bool,\\n\\n  /**\\n   * Indicates if the item should be disabled.\\n   */\\n  isDisabled: PropTypes.bool,\\n\\n  /**\\n   * Indicates that clicking on this item while displayed inside a menu should close the menu.\\n   */\\n  shouldCloseOnClick: PropTypes.bool,\\n\\n  /**\\n   * List of Menu.Items to display in a submenu when this item is selected.\\n   */\\n  subMenuItems: PropTypes.arrayOf(PropTypes.element),\\n\\n  /**\\n   * Callback function for when the item is clicked\\n   */\\n  onClick: PropTypes.func,\\n\\n  /**\\n   * A string representation of the width in px, limited to:\\n   * 160, 240, 320, 640, 960, 1280, 1760, or auto\\n   */\\n  menuWidth: PropTypes.oneOf(Object.keys(Menu.Opts.widths)),\\n};\\n\\nconst contextTypes = {\\n  isCollapsibleGroupItem: PropTypes.bool,\\n  isCollapsibleMenuItem: PropTypes.bool,\\n};\\n\\nconst defaultProps = {\\n  isSelected: false,\\n  isReversed: false,\\n  shouldCloseOnClick: true,\\n  isIconOnly: false,\\n};\\n\\nclass CollapsibleMenuViewItem extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.setButtonNode = this.setButtonNode.bind(this);\\n    this.getButtonNode = this.getButtonNode.bind(this);\\n  }\\n\\n  setButtonNode(node) {\\n    this.buttonNode = node;\\n  }\\n\\n  getButtonNode() {\\n    return this.buttonNode;\\n  }\\n\\n  render() {\\n    const {\\n      icon,\\n      isIconOnly,\\n      isReversed,\\n      text,\\n      isSelected,\\n      isDisabled,\\n      subMenuItems,\\n      shouldCloseOnClick,\\n      boundingRef,\\n      menuWidth,\\n      ...customProps\\n    } = this.props;\\n\\n    const { isCollapsibleGroupItem, isCollapsibleMenuItem } = this.context;\\n    const attributes = { ...customProps };\\n    let item;\\n\\n    if (isCollapsibleMenuItem) {\\n      item = (\\n        <Menu.Item\\n          {...attributes}\\n          text={text}\\n          isSelected={isSelected && isCollapsibleGroupItem}\\n          isDisabled={isDisabled}\\n          subMenuItems={subMenuItems}\\n        />\\n      );\\n    } else if (isCollapsibleGroupItem) {\\n      item = (\\n        <ButtonGroup.Button\\n          {...attributes}\\n          icon={icon}\\n          text={text}\\n          isDisabled={isDisabled}\\n        />\\n      );\\n    } else if (subMenuItems && subMenuItems.length > 0) {\\n      item = (\\n        <Menu\\n          contentWidth={menuWidth}\\n          boundingRef={boundingRef}\\n          button={(\\n            <Button\\n              {...attributes}\\n              icon={icon}\\n              text={text}\\n              isReversed={isReversed}\\n              isDisabled={isDisabled}\\n              onClick={this.handleButtonClick}\\n              isIconOnly={isIconOnly}\\n            />\\n          )}\\n        >\\n          {subMenuItems}\\n        </Menu>\\n      );\\n    } else {\\n      item = (\\n        <div className={cx('face-up-item')}>\\n          <Button\\n            {...attributes}\\n            icon={icon}\\n            text={text}\\n            isReversed={isReversed}\\n            isDisabled={isDisabled}\\n            isIconOnly={isIconOnly}\\n          />\\n        </div>\\n      );\\n    }\\n\\n    return item;\\n  }\\n}\\n\\nCollapsibleMenuViewItem.propTypes = propTypes;\\nCollapsibleMenuViewItem.defaultProps = defaultProps;\\nCollapsibleMenuViewItem.contextTypes = contextTypes;\\nCollapsibleMenuViewItem.Opts = {\\n  widths: Menu.Opts.widths,\\n};\\n\\nexport default CollapsibleMenuViewItem;\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport classNames from 'classnames/bind';\\nimport ButtonGroup from 'terra-button-group';\\nimport Menu from './_CollapsibleMenu';\\nimport styles from './CollapsibleMenuView.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   * Callback function that is called when the group's selection state changes\\n   */\\n  onChange: PropTypes.func,\\n  /**\\n   * CollapsibleMenuView.Items to be grouped together\\n   */\\n  children: PropTypes.node.isRequired,\\n  /**\\n   * A list of keys of the CollapsibleMenuView.Items that should be selected.\\n   */\\n  selectedKeys: PropTypes.arrayOf(PropTypes.string),\\n};\\n\\nconst defaultProps = {\\n  selectedKeys: [],\\n};\\n\\nconst childContextTypes = {\\n  isCollapsibleGroupItem: PropTypes.bool,\\n};\\n\\nconst contextTypes = {\\n  isCollapsibleMenuItem: PropTypes.bool,\\n};\\n\\nclass CollapsibleMenuViewItemGroup extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.handleOnChange = this.handleOnChange.bind(this);\\n  }\\n\\n  getChildContext() {\\n    return { isCollapsibleGroupItem: true };\\n  }\\n\\n  handleOnChange(event, selectedIndex) {\\n    if (this.props.onChange) {\\n      let selectedKey = selectedIndex;\\n      React.Children.forEach(this.props.children, (child, index) => {\\n        if (selectedIndex === index) {\\n          selectedKey = child.key;\\n        }\\n      });\\n\\n      this.props.onChange(event, selectedKey);\\n    }\\n  }\\n\\n  render() {\\n    const {\\n      children,\\n      onChange,\\n      selectedKeys,\\n      ...customProps\\n    } = this.props;\\n\\n    const { isCollapsibleMenuItem } = this.context;\\n\\n    if (isCollapsibleMenuItem && selectedKeys.length) {\\n      return (\\n        <li role=\\\"none\\\">\\n          <Menu.ItemGroup {...customProps} onChange={this.handleOnChange}>\\n            {children}\\n          </Menu.ItemGroup>\\n        </li>\\n      );\\n    } if (isCollapsibleMenuItem) {\\n      return (\\n        <div {...customProps}>\\n          { children }\\n        </div>\\n      );\\n    }\\n\\n    const buttonGroupClassNames = cx([\\n      'face-up-item',\\n      customProps.className,\\n    ]);\\n\\n    return (\\n      <ButtonGroup {...customProps} onChange={onChange} className={buttonGroupClassNames} selectedKeys={selectedKeys}>\\n        {children}\\n      </ButtonGroup>\\n    );\\n  }\\n}\\n\\nCollapsibleMenuViewItemGroup.propTypes = propTypes;\\nCollapsibleMenuViewItemGroup.defaultProps = defaultProps;\\nCollapsibleMenuViewItemGroup.childContextTypes = childContextTypes;\\nCollapsibleMenuViewItemGroup.contextTypes = contextTypes;\\n\\nexport default CollapsibleMenuViewItemGroup;\\n\"","export default \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport classNames from 'classnames/bind';\\nimport Checkbox from 'terra-form-checkbox';\\nimport Menu from './_CollapsibleMenu';\\nimport styles from './CollapsibleMenuView.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   * Sets the item's text\\n   */\\n  text: PropTypes.string.isRequired,\\n  /**\\n   * Indicates if the item is selected.\\n   */\\n  isSelected: PropTypes.bool,\\n  /**\\n   * Callback function for when selection state changes. Is called with event and isSelected parameters\\n   */\\n  onChange: PropTypes.func,\\n  /**\\n   *  Indicates that the toggle should be selectable\\n   */\\n  isSelectable: PropTypes.bool,\\n  /**\\n   * Indicates if the toggle should be disabled.\\n   */\\n  isDisabled: PropTypes.bool,\\n  /**\\n   * Indicates that clicking on this item while displayed inside a menu should close the menu\\n   */\\n  shouldCloseOnClick: PropTypes.bool,\\n};\\n\\nconst contextTypes = {\\n  isCollapsibleMenuItem: PropTypes.bool,\\n};\\n\\nconst defaultProps = {\\n  isSelected: false,\\n  isSelectable: true,\\n  shouldCloseOnClick: true,\\n};\\n\\nclass CollapsibleMenuViewToggle extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.wrappedOnChange = this.wrappedOnChange.bind(this);\\n  }\\n\\n  // Wrapping onChange event so that the same parameters will be given when the display is a checkbox and a menu.item\\n  wrappedOnChange(event) {\\n    if (this.props.onChange) {\\n      this.props.onChange(event, event.target.checked);\\n    }\\n  }\\n\\n  render() {\\n    const {\\n      text,\\n      isSelected,\\n      isSelectable,\\n      isDisabled,\\n      onChange,\\n      shouldCloseOnClick,\\n      ...customProps\\n    } = this.props;\\n\\n    const { isCollapsibleMenuItem } = this.context;\\n    const controllClassName = cx([\\n      'control',\\n      { 'is-disabled': isDisabled || !isSelectable },\\n      customProps.className,\\n    ]);\\n\\n    if (isCollapsibleMenuItem) {\\n      return (\\n        <Menu.Item\\n          {...customProps}\\n          text={text}\\n          isSelected={isSelected}\\n          isSelectable={isSelectable}\\n          isDisabled={isDisabled}\\n          onChange={onChange}\\n        />\\n      );\\n    }\\n\\n    return (\\n      <div className={cx(['face-up-item'])}>\\n        <Checkbox\\n          {...customProps}\\n          className={controllClassName}\\n          labelText={text}\\n          defaultChecked={isSelected}\\n          onChange={this.wrappedOnChange}\\n          disabled={isDisabled || !isSelectable}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nCollapsibleMenuViewToggle.propTypes = propTypes;\\nCollapsibleMenuViewToggle.defaultProps = defaultProps;\\nCollapsibleMenuViewToggle.contextTypes = contextTypes;\\n\\nexport default CollapsibleMenuViewToggle;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _IconTable = _interopRequireDefault(require(\"terra-icon/lib/icon/IconTable\"));\n\nvar _IconFlowsheet = _interopRequireDefault(require(\"terra-icon/lib/icon/IconFlowsheet\"));\n\nvar _IconVisualization = _interopRequireDefault(require(\"terra-icon/lib/icon/IconVisualization\"));\n\nvar _IconSend = _interopRequireDefault(require(\"terra-icon/lib/icon/IconSend\"));\n\nvar _IconPrinter = _interopRequireDefault(require(\"terra-icon/lib/icon/IconPrinter\"));\n\nvar _IconFolder = _interopRequireDefault(require(\"terra-icon/lib/icon/IconFolder\"));\n\nvar _IconTrash = _interopRequireDefault(require(\"terra-icon/lib/icon/IconTrash\"));\n\nvar _terraCollapsibleMenuView = _interopRequireDefault(require(\"terra-collapsible-menu-view\"));\n\nvar CollapsibleMenuViewDemo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(CollapsibleMenuViewDemo, _React$Component);\n\n  function CollapsibleMenuViewDemo(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CollapsibleMenuViewDemo);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CollapsibleMenuViewDemo).call(this, props));\n    _this.handleDisplayTypeChange = _this.handleDisplayTypeChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this.handleToggleOneOnChange = _this.handleToggleOneOnChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this.handleToggleTwoOnChange = _this.handleToggleTwoOnChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this.state = {\n      toggle1Selection: false,\n      toggle2Selection: false,\n      displayType: 'tableView'\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(CollapsibleMenuViewDemo, [{\n    key: \"handleToggleOneOnChange\",\n    value: function handleToggleOneOnChange(event, isSelected) {\n      this.setState({\n        toggle1Selection: isSelected\n      });\n    }\n  }, {\n    key: \"handleToggleTwoOnChange\",\n    value: function handleToggleTwoOnChange(event, isSelected) {\n      this.setState({\n        toggle2Selection: isSelected\n      });\n    }\n  }, {\n    key: \"handleDisplayTypeChange\",\n    value: function handleDisplayTypeChange(event, selectedKey) {\n      this.setState({\n        displayType: selectedKey\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_terraCollapsibleMenuView.default, null, _react.default.createElement(_terraCollapsibleMenuView.default.Toggle, {\n        text: \"Toggle Item 1\",\n        key: \"toggle1\",\n        shouldCloseOnClick: false,\n        onChange: this.handleToggleOneOnChange,\n        isSelected: this.state.toggle1Selection,\n        isSelectable: false\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Toggle, {\n        text: \"Toggle Item 2\",\n        key: \"toggle2\",\n        shouldCloseOnClick: false,\n        onChange: this.handleToggleTwoOnChange,\n        isSelected: this.state.toggle2Selection,\n        isDisabled: true\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Divider, {\n        key: \"Divider1\"\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        text: \"Menu Button 1\",\n        key: \"MenuButton1\",\n        shouldCloseOnClick: false,\n        subMenuItems: [_react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n          text: \"Default Item 1\",\n          key: \"defaultItem1\"\n        }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n          text: \"Default Item 2\",\n          key: \"defaultItem2\"\n        })]\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        text: \"Menu Button 2\",\n        key: \"MenuButton 2\",\n        isDisabled: true,\n        shouldCloseOnClick: false,\n        subMenuItems: [_react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n          text: \"Default Item 1\",\n          key: \"defaultItem1\"\n        }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n          text: \"Default Item 2\",\n          key: \"defaultItem2\",\n          isDisabled: true\n        })]\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Divider, {\n        key: \"Divider2\"\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.ItemGroup, {\n        key: \"ViewTypeSelection\",\n        selectedKeys: [this.state.displayType],\n        onChange: this.handleDisplayTypeChange\n      }, _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconTable.default, null),\n        text: \"Table View\",\n        key: \"tableView\",\n        isIconOnly: true,\n        shouldCloseOnClick: false,\n        isSelected: this.state.displayType === 'tableView'\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconFlowsheet.default, null),\n        text: \"Expanded View\",\n        key: \"expandedView\",\n        isIconOnly: true,\n        shouldCloseOnClick: false,\n        isSelected: this.state.displayType === 'expandedView'\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconVisualization.default, null),\n        text: \"Trending View\",\n        key: \"trendingView\",\n        isIconOnly: true,\n        shouldCloseOnClick: false,\n        isSelected: this.state.displayType === 'trendingView',\n        isDisabled: true\n      })), _react.default.createElement(_terraCollapsibleMenuView.default.Divider, {\n        key: \"Divider3\"\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconSend.default, null),\n        text: \"Send Message\",\n        key: \"send\",\n        isIconOnly: true\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.ItemGroup, {\n        key: \"messageActionGroup\"\n      }, _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconPrinter.default, null),\n        text: \"Print Message\",\n        key: \"print\",\n        isIconOnly: true\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconFolder.default, null),\n        text: \"Move Message to Folder...\",\n        key: \"move\",\n        isIconOnly: true,\n        isDisabled: true\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        icon: _react.default.createElement(_IconTrash.default, null),\n        text: \"Trash Message\",\n        key: \"trash\",\n        isIconOnly: true\n      })), _react.default.createElement(_terraCollapsibleMenuView.default.Divider, {\n        key: \"Divider4\"\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        text: \"Button 1\",\n        key: \"button1\"\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        text: \"Button 2\",\n        key: \"button2\",\n        isDisabled: true\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        text: \"Button 3\",\n        key: \"button3\"\n      }), _react.default.createElement(_terraCollapsibleMenuView.default.Item, {\n        text: \"Button 4\",\n        key: \"button4\"\n      }));\n    }\n  }]);\n  return CollapsibleMenuViewDemo;\n}(_react.default.Component);\n\nvar _default = CollapsibleMenuViewDemo;\nexports.default = _default;","export default \"import React from 'react';\\nimport IconTable from 'terra-icon/lib/icon/IconTable';\\nimport IconFlowsheet from 'terra-icon/lib/icon/IconFlowsheet';\\nimport IconVisualization from 'terra-icon/lib/icon/IconVisualization';\\nimport IconSend from 'terra-icon/lib/icon/IconSend';\\nimport IconPrinter from 'terra-icon/lib/icon/IconPrinter';\\nimport IconFolder from 'terra-icon/lib/icon/IconFolder';\\nimport IconTrash from 'terra-icon/lib/icon/IconTrash';\\nimport CollapsibleMenuView from 'terra-collapsible-menu-view';\\n\\nclass CollapsibleMenuViewDemo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.handleDisplayTypeChange = this.handleDisplayTypeChange.bind(this);\\n    this.handleToggleOneOnChange = this.handleToggleOneOnChange.bind(this);\\n    this.handleToggleTwoOnChange = this.handleToggleTwoOnChange.bind(this);\\n    this.state = {\\n      toggle1Selection: false,\\n      toggle2Selection: false,\\n      displayType: 'tableView',\\n    };\\n  }\\n\\n  handleToggleOneOnChange(event, isSelected) {\\n    this.setState({ toggle1Selection: isSelected });\\n  }\\n\\n  handleToggleTwoOnChange(event, isSelected) {\\n    this.setState({ toggle2Selection: isSelected });\\n  }\\n\\n  handleDisplayTypeChange(event, selectedKey) {\\n    this.setState({ displayType: selectedKey });\\n  }\\n\\n  render() {\\n    return (\\n      <CollapsibleMenuView>\\n        <CollapsibleMenuView.Toggle\\n          text=\\\"Toggle Item 1\\\"\\n          key=\\\"toggle1\\\"\\n          shouldCloseOnClick={false}\\n          onChange={this.handleToggleOneOnChange}\\n          isSelected={this.state.toggle1Selection}\\n          isSelectable={false}\\n        />\\n        <CollapsibleMenuView.Toggle\\n          text=\\\"Toggle Item 2\\\"\\n          key=\\\"toggle2\\\"\\n          shouldCloseOnClick={false}\\n          onChange={this.handleToggleTwoOnChange}\\n          isSelected={this.state.toggle2Selection}\\n          isDisabled\\n        />\\n        <CollapsibleMenuView.Divider key=\\\"Divider1\\\" />\\n        <CollapsibleMenuView.Item\\n          text=\\\"Menu Button 1\\\"\\n          key=\\\"MenuButton1\\\"\\n          shouldCloseOnClick={false}\\n          subMenuItems={[\\n            <CollapsibleMenuView.Item text=\\\"Default Item 1\\\" key=\\\"defaultItem1\\\" />,\\n            <CollapsibleMenuView.Item text=\\\"Default Item 2\\\" key=\\\"defaultItem2\\\" />,\\n          ]}\\n        />\\n        <CollapsibleMenuView.Item\\n          text=\\\"Menu Button 2\\\"\\n          key=\\\"MenuButton 2\\\"\\n          isDisabled\\n          shouldCloseOnClick={false}\\n          subMenuItems={[\\n            <CollapsibleMenuView.Item text=\\\"Default Item 1\\\" key=\\\"defaultItem1\\\" />,\\n            <CollapsibleMenuView.Item text=\\\"Default Item 2\\\" key=\\\"defaultItem2\\\" isDisabled />,\\n          ]}\\n        />\\n        <CollapsibleMenuView.Divider key=\\\"Divider2\\\" />\\n        <CollapsibleMenuView.ItemGroup key=\\\"ViewTypeSelection\\\" selectedKeys={[this.state.displayType]} onChange={this.handleDisplayTypeChange}>\\n          <CollapsibleMenuView.Item\\n            icon={<IconTable />}\\n            text=\\\"Table View\\\"\\n            key=\\\"tableView\\\"\\n            isIconOnly\\n            shouldCloseOnClick={false}\\n            isSelected={this.state.displayType === 'tableView'}\\n          />\\n          <CollapsibleMenuView.Item\\n            icon={<IconFlowsheet />}\\n            text=\\\"Expanded View\\\"\\n            key=\\\"expandedView\\\"\\n            isIconOnly\\n            shouldCloseOnClick={false}\\n            isSelected={this.state.displayType === 'expandedView'}\\n          />\\n          <CollapsibleMenuView.Item\\n            icon={<IconVisualization />}\\n            text=\\\"Trending View\\\"\\n            key=\\\"trendingView\\\"\\n            isIconOnly\\n            shouldCloseOnClick={false}\\n            isSelected={this.state.displayType === 'trendingView'}\\n            isDisabled\\n          />\\n        </CollapsibleMenuView.ItemGroup>\\n        <CollapsibleMenuView.Divider key=\\\"Divider3\\\" />\\n        <CollapsibleMenuView.Item icon={<IconSend />} text=\\\"Send Message\\\" key=\\\"send\\\" isIconOnly />\\n        <CollapsibleMenuView.ItemGroup key=\\\"messageActionGroup\\\">\\n          <CollapsibleMenuView.Item icon={<IconPrinter />} text=\\\"Print Message\\\" key=\\\"print\\\" isIconOnly />\\n          <CollapsibleMenuView.Item icon={<IconFolder />} text=\\\"Move Message to Folder...\\\" key=\\\"move\\\" isIconOnly isDisabled />\\n          <CollapsibleMenuView.Item icon={<IconTrash />} text=\\\"Trash Message\\\" key=\\\"trash\\\" isIconOnly />\\n        </CollapsibleMenuView.ItemGroup>\\n        <CollapsibleMenuView.Divider key=\\\"Divider4\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 1\\\" key=\\\"button1\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 2\\\" key=\\\"button2\\\" isDisabled />\\n        <CollapsibleMenuView.Item text=\\\"Button 3\\\" key=\\\"button3\\\" />\\n        <CollapsibleMenuView.Item text=\\\"Button 4\\\" key=\\\"button4\\\" />\\n      </CollapsibleMenuView>\\n    );\\n  }\\n}\\n\\nexport default CollapsibleMenuViewDemo;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _README = _interopRequireDefault(require(\"../../../../docs/README.md\"));\n\nvar _package = require(\"../../../../package.json\");\n\nvar _CollapsibleMenuView = _interopRequireDefault(require(\"!raw-loader!../../../../src/CollapsibleMenuView\"));\n\nvar _CollapsibleMenuViewItem = _interopRequireDefault(require(\"!raw-loader!../../../../src/CollapsibleMenuViewItem\"));\n\nvar _CollapsibleMenuViewItemGroup = _interopRequireDefault(require(\"!raw-loader!../../../../src/CollapsibleMenuViewItemGroup\"));\n\nvar _CollapsibleMenuViewToggle = _interopRequireDefault(require(\"!raw-loader!../../../../src/CollapsibleMenuViewToggle\"));\n\nvar _CollapsibleMenuViewDemo = _interopRequireDefault(require(\"../example/CollapsibleMenuViewDemo\"));\n\nvar _CollapsibleMenuViewDemo2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/CollapsibleMenuViewDemo\"));\n\n// Component Source\n// Example Files\nvar DocPage = function DocPage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: _package.name,\n    readme: _README.default,\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/\".concat(_package.name),\n    examples: [{\n      title: 'CollapsibleMenuView Example',\n      example: _react.default.createElement(_CollapsibleMenuViewDemo.default, null),\n      source: _CollapsibleMenuViewDemo2.default\n    }],\n    propsTables: [{\n      componentName: 'CollapsibleMenuView',\n      componentSrc: _CollapsibleMenuView.default\n    }, {\n      componentName: 'CollapsibleMenuView.Item',\n      componentSrc: _CollapsibleMenuViewItem.default\n    }, {\n      componentName: 'CollapsibleMenuView.ItemGroup',\n      componentSrc: _CollapsibleMenuViewItemGroup.default\n    }, {\n      componentName: 'CollapsibleMenuView.Toggle',\n      componentSrc: _CollapsibleMenuViewToggle.default\n    }]\n  });\n};\n\nvar _default = DocPage;\nexports.default = _default;"],"sourceRoot":""}