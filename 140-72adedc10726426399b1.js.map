{"version":3,"sources":["webpack:///./packages/terra-navigation-side-menu/docs/README.md","webpack:///./packages/terra-navigation-side-menu/src/NavigationSideMenu.jsx","webpack:///./packages/terra-navigation-side-menu/lib/terra-dev-site/doc/example/NavigationSideMenuExample.js","webpack:///./packages/terra-navigation-side-menu/lib/terra-dev-site/doc/example/NavigationSideMenuExample.module.scss?ac0f","webpack:///./packages/terra-navigation-side-menu/src/terra-dev-site/doc/example/NavigationSideMenuExample.jsx","webpack:///./packages/terra-navigation-side-menu/lib/terra-dev-site/doc/navigation-side-menu/NavigationSideMenu.1.doc.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_react","_bind","_terraNavigationSideMenu","_NavigationSideMenuExampleModule","cx","bind","_default","_React$Component","NavigationSideMenuDefault","props","_this","this","call","handleOnChange","resetMenuState","fakeRoutingBack","state","selectedMenuKey","selectedChildKey","undefined","key","event","changeData","setState","content","createElement","className","type","onClick","id","menuItems","text","childKeys","onChange","routingStackBack","Component","module","_terraDocTemplate","_package","_README","_NavigationSideMenu","_NavigationSideMenuExample","_NavigationSideMenuExample2","packageName","name","readme","srcPath","concat","examples","title","example","source","propsTables","componentSrc"],"mappings":"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","file":"140-72adedc10726426399b1.js","sourcesContent":["export default \"# Terra Navigation Side Menu\\n\\nA structural component for nesting navigational items within the content section of the terra-menu-layout.\\n\\n## Getting Started\\n\\n- Install with [npmjs](https://www.npmjs.com):\\n  - `npm install terra-navigation-side-menu`\\n\\n<!-- AUTO-GENERATED-CONTENT:START Peer Dependencies -->\\n## Peer Dependencies\\n\\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\\n\\n| Peer Dependency | Version |\\n|-|-|\\n| react | ^16.8.5 |\\n| react-dom | ^16.8.5 |\\n| react-intl | ^2.8.0 |\\n\\n<!-- AUTO-GENERATED-CONTENT:END -->\\n\\n## Component Features\\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\\n\"","export default \"import React, { Component, Fragment } from 'react';\\nimport PropTypes from 'prop-types';\\nimport { injectIntl, intlShape } from 'react-intl';\\nimport classNames from 'classnames/bind';\\nimport ActionHeader from 'terra-action-header';\\nimport ContentContainer from 'terra-content-container';\\nimport VisuallyHiddenText from 'terra-visually-hidden-text';\\nimport * as KeyCode from 'keycode-js';\\nimport MenuItem from './_MenuItem';\\n\\nimport styles from './NavigationSideMenu.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nconst propTypes = {\\n  /**\\n   * @private\\n   * Internationalization object with translation APIs. Provided by `injectIntl`.\\n   */\\n  intl: intlShape.isRequired,\\n  /**\\n   * An array of configuration for each menu item.\\n   */\\n  menuItems: PropTypes.arrayOf(PropTypes.shape({\\n    /**\\n     * Keys of menu items\\n     */\\n    childKeys: PropTypes.arrayOf(PropTypes.string),\\n    /**\\n     * Used to match visual style of a menuItem with children on an item without children.\\n     */\\n    hasSubMenu: PropTypes.bool,\\n    /**\\n     * Whether or not the menu is the primary navigation links in small form factor.\\n     */\\n    isRootMenu: PropTypes.bool,\\n    /**\\n     * ID to be applied to the menu item div.\\n     */\\n    id: PropTypes.string,\\n    /**\\n     * Optional meta data to be returned along with the item key within the onChange.\\n     */\\n    metaData: PropTypes.object,\\n    /**\\n     * Unique identifier that will be returned in the onChange callback when an endpoint is reached.\\n     */\\n    key: PropTypes.string.isRequired,\\n    /**\\n     * Text for the menu row and header title when selected.\\n     */\\n    text: PropTypes.string.isRequired,\\n  })),\\n  /**\\n   * Callback function when a menu endpoint is reached.\\n   * returns (event, { selectedMenuKey: String, selectedChildKey: String, metaData: Object})\\n   */\\n  onChange: PropTypes.func.isRequired,\\n  /**\\n   * Delegate prop showParent function that is provided by the terra-navigation-layout.\\n   */\\n  routingStackBack: PropTypes.func,\\n  /**\\n   * Key of the currently selected child item on the selected menu page.\\n   * This is used when traveling back up the menu stack or when the child is an end point.\\n   */\\n  selectedChildKey: PropTypes.string,\\n  /**\\n   * Key of the currently selected menu page.\\n   */\\n  selectedMenuKey: PropTypes.string.isRequired,\\n  /**\\n   * An optional toolbar to display below the side menu action header\\n   */\\n  toolbar: PropTypes.element,\\n};\\n\\nconst defaultProps = {\\n  menuItems: [],\\n};\\n\\nconst processMenuItems = (menuItems) => {\\n  const items = {};\\n  const parents = {};\\n  menuItems.forEach((item) => {\\n    items[item.key] = {\\n      id: item.id,\\n      text: item.text,\\n      childKeys: item.childKeys,\\n      metaData: item.metaData,\\n      hasSubMenu: item.hasSubMenu,\\n      isRootMenu: item.isRootMenu,\\n    };\\n    if (item.childKeys) {\\n      item.childKeys.forEach((key) => {\\n        parents[key] = item.key;\\n      });\\n    }\\n  });\\n  return { items, parents };\\n};\\n\\nclass NavigationSideMenu extends Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.handleBackClick = this.handleBackClick.bind(this);\\n    this.handleItemClick = this.handleItemClick.bind(this);\\n    this.updateAriaLiveContent = this.updateAriaLiveContent.bind(this);\\n    this.setVisuallyHiddenComponent = this.setVisuallyHiddenComponent.bind(this);\\n\\n    const { items, parents } = processMenuItems(props.menuItems);\\n    this.state = {\\n      items,\\n      parents,\\n      prevPropsMenuItem: props.menuItems,\\n    };\\n  }\\n\\n  static getDerivedStateFromProps(nextProps, prevState) {\\n    if (nextProps.menuItems !== prevState.prevPropsMenuItem) {\\n      return processMenuItems(nextProps.menuItems);\\n    }\\n    return null;\\n  }\\n\\n  setVisuallyHiddenComponent(node) {\\n    this.visuallyHiddenComponent = node;\\n  }\\n\\n  handleBackClick(event) {\\n    const parentKey = this.state.parents[this.props.selectedMenuKey];\\n    if (parentKey) {\\n      this.props.onChange(\\n        event,\\n        {\\n          selectedMenuKey: parentKey,\\n          selectedChildKey: this.props.selectedMenuKey,\\n          metaData: this.state.items[parentKey].metaData,\\n        },\\n      );\\n    }\\n  }\\n\\n  handleItemClick(event, key) {\\n    const selectedItem = this.state.items[key];\\n\\n    if (this.state.items[key] && this.state.items[key].text) {\\n      this.updateAriaLiveContent(this.state.items[key].text);\\n    }\\n\\n    if (selectedItem.childKeys && selectedItem.childKeys.length) {\\n      this.props.onChange(\\n        event,\\n        {\\n          selectedMenuKey: key,\\n          selectedChildKey: undefined,\\n          metaData: selectedItem.metaData,\\n        },\\n      );\\n    } else {\\n      this.props.onChange(\\n        event,\\n        {\\n          selectedMenuKey: this.props.selectedMenuKey,\\n          selectedChildKey: key,\\n          metaData: selectedItem.metaData,\\n        },\\n      );\\n    }\\n  }\\n\\n  buildListItem(key) {\\n    const item = this.state.items[key];\\n    const onKeyDown = (event) => {\\n      if (event.nativeEvent.keyCode === KeyCode.KEY_SPACE || event.nativeEvent.keyCode === KeyCode.KEY_RETURN) {\\n        event.preventDefault();\\n        this.handleItemClick(event, key);\\n      }\\n    };\\n\\n    return (\\n      <MenuItem\\n        id={item.id}\\n        hasChevron={item.hasSubMenu || (item.childKeys && item.childKeys.length > 0)}\\n        isSelected={key === this.props.selectedChildKey}\\n        text={item.text}\\n        key={key}\\n        onClick={(event) => { this.handleItemClick(event, key); }}\\n        onKeyDown={onKeyDown}\\n        data-menu-item={key}\\n      />\\n    );\\n  }\\n\\n  buildListContent(currentItem) {\\n    if (currentItem && currentItem.childKeys && currentItem.childKeys.length) {\\n      return <nav role=\\\"navigation\\\"><ul className={cx(['side-menu-list'])}>{currentItem.childKeys.map(key => this.buildListItem(key))}</ul></nav>;\\n    }\\n    return null;\\n  }\\n\\n  updateAriaLiveContent(item) {\\n    const { intl } = this.props;\\n    const selected = intl.formatMessage({ id: 'Terra.navigation.side.menu.selected' });\\n\\n    // Guard against race condition with the ref being established and updating the ref's innerText\\n    if (!this.visuallyHiddenComponent) {\\n      return;\\n    }\\n\\n    this.visuallyHiddenComponent.innerText = item ? `${item} ${selected}` : '';\\n  }\\n\\n  render() {\\n    const {\\n      menuItems,\\n      onChange,\\n      routingStackBack,\\n      selectedChildKey,\\n      selectedMenuKey,\\n      toolbar,\\n      ...customProps\\n    } = this.props;\\n    const currentItem = this.state.items[selectedMenuKey];\\n    let sideMenuContentContainerClassNames = cx([\\n      'side-menu-content-container',\\n    ]);\\n\\n    let onBack;\\n    const parentKey = this.state.parents[selectedMenuKey];\\n    if (parentKey) {\\n      onBack = this.handleBackClick;\\n    } else {\\n      onBack = routingStackBack;\\n    }\\n\\n    let header;\\n    if (onBack || !currentItem.isRootMenu) {\\n      header = (\\n        <Fragment>\\n          <ActionHeader\\n            className={cx('side-menu-action-header')}\\n            onBack={onBack}\\n            title={currentItem ? currentItem.text : null}\\n            data-navigation-side-menu-action-header\\n          />\\n          {toolbar}\\n        </Fragment>\\n      );\\n    } else {\\n      sideMenuContentContainerClassNames = cx(['side-menu-content-container', 'is-root']);\\n    }\\n\\n    return (\\n      <Fragment>\\n        <VisuallyHiddenText\\n          aria-atomic=\\\"true\\\"\\n          aria-live=\\\"assertive\\\"\\n          aria-relevant=\\\"additions text\\\"\\n          refCallback={this.setVisuallyHiddenComponent}\\n        />\\n        <ContentContainer {...customProps} header={header} fill className={sideMenuContentContainerClassNames}>\\n          {this.buildListContent(currentItem)}\\n        </ContentContainer>\\n      </Fragment>\\n    );\\n  }\\n}\\n\\nNavigationSideMenu.propTypes = propTypes;\\nNavigationSideMenu.defaultProps = defaultProps;\\n\\nexport default injectIntl(NavigationSideMenu);\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _bind = _interopRequireDefault(require(\"classnames/bind\"));\n\nvar _terraNavigationSideMenu = _interopRequireDefault(require(\"terra-navigation-side-menu\"));\n\nvar _NavigationSideMenuExampleModule = _interopRequireDefault(require(\"./NavigationSideMenuExample.module.scss\"));\n\nvar cx = _bind.default.bind(_NavigationSideMenuExampleModule.default);\n\nvar NavigationSideMenuDefault =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(NavigationSideMenuDefault, _React$Component);\n\n  function NavigationSideMenuDefault(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, NavigationSideMenuDefault);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NavigationSideMenuDefault).call(this, props));\n    _this.handleOnChange = _this.handleOnChange.bind((0, _assertThisInitialized2.default)(_this));\n    _this.resetMenuState = _this.resetMenuState.bind((0, _assertThisInitialized2.default)(_this));\n    _this.fakeRoutingBack = _this.fakeRoutingBack.bind((0, _assertThisInitialized2.default)(_this));\n    _this.state = {\n      selectedMenuKey: 'menu',\n      selectedChildKey: undefined\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(NavigationSideMenuDefault, [{\n    key: \"handleOnChange\",\n    value: function handleOnChange(event, changeData) {\n      this.setState({\n        selectedMenuKey: changeData.selectedMenuKey,\n        selectedChildKey: changeData.selectedChildKey\n      });\n    }\n  }, {\n    key: \"resetMenuState\",\n    value: function resetMenuState() {\n      this.setState({\n        selectedMenuKey: 'menu',\n        selectedChildKey: undefined\n      });\n    }\n  }, {\n    key: \"fakeRoutingBack\",\n    value: function fakeRoutingBack() {\n      this.setState({\n        selectedMenuKey: 'fake-parent',\n        selectedChildKey: undefined\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.selectedMenuKey === 'fake-parent') {\n        content = _react.default.createElement(\"div\", {\n          className: cx('content')\n        }, _react.default.createElement(\"button\", {\n          type: \"button\",\n          onClick: this.resetMenuState\n        }, \"Child Route\"), _react.default.createElement(\"p\", null, \"Parent Route\"));\n      } else {\n        content = _react.default.createElement(_terraNavigationSideMenu.default, {\n          id: \"test-menu\",\n          menuItems: [{\n            key: 'menu',\n            text: 'Menu',\n            childKeys: ['submenu1', 'submenu2', 'submenu3', 'submenu4']\n          }, {\n            key: 'submenu1',\n            text: 'Sub Menu 1',\n            childKeys: ['subsubmenu1', 'subsubmenu2', 'subsubmenu3'],\n            id: 'test-item-1'\n          }, {\n            key: 'submenu2',\n            text: 'Sub Menu 2'\n          }, {\n            key: 'submenu3',\n            text: 'Sub Menu 3'\n          }, {\n            key: 'submenu4',\n            text: 'Sub Menu 4'\n          }, {\n            key: 'subsubmenu1',\n            text: 'Sub-Sub Menu 1',\n            id: 'test-item-2'\n          }, {\n            key: 'subsubmenu2',\n            text: 'Sub-Sub Menu 2'\n          }, {\n            key: 'subsubmenu3',\n            text: 'Sub-Sub Menu 3'\n          }],\n          onChange: this.handleOnChange,\n          routingStackBack: this.fakeRoutingBack,\n          selectedMenuKey: this.state.selectedMenuKey,\n          selectedChildKey: this.state.selectedChildKey\n        });\n      }\n\n      return _react.default.createElement(\"div\", {\n        className: cx('content-wrapper')\n      }, content);\n    }\n  }]);\n  return NavigationSideMenuDefault;\n}(_react.default.Component);\n\nvar _default = NavigationSideMenuDefault;\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"NavigationSideMenuExample-module__content___3w5fk\",\"content-wrapper\":\"NavigationSideMenuExample-module__content-wrapper___2sz9G\",\"toolbar\":\"NavigationSideMenuExample-module__toolbar___uM12J\"};","export default \"import React from 'react';\\nimport classNames from 'classnames/bind';\\nimport NavigationSideMenu from 'terra-navigation-side-menu';\\n\\nimport styles from './NavigationSideMenuExample.module.scss';\\n\\nconst cx = classNames.bind(styles);\\n\\nclass NavigationSideMenuDefault extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.handleOnChange = this.handleOnChange.bind(this);\\n    this.resetMenuState = this.resetMenuState.bind(this);\\n    this.fakeRoutingBack = this.fakeRoutingBack.bind(this);\\n\\n    this.state = { selectedMenuKey: 'menu', selectedChildKey: undefined };\\n  }\\n\\n  handleOnChange(event, changeData) {\\n    this.setState({ selectedMenuKey: changeData.selectedMenuKey, selectedChildKey: changeData.selectedChildKey });\\n  }\\n\\n  resetMenuState() {\\n    this.setState({ selectedMenuKey: 'menu', selectedChildKey: undefined });\\n  }\\n\\n  fakeRoutingBack() {\\n    this.setState({ selectedMenuKey: 'fake-parent', selectedChildKey: undefined });\\n  }\\n\\n  render() {\\n    let content;\\n    if (this.state.selectedMenuKey === 'fake-parent') {\\n      content = (\\n        <div className={cx('content')}>\\n          <button type=\\\"button\\\" onClick={this.resetMenuState}>\\n            Child Route\\n          </button>\\n          <p>Parent Route</p>\\n        </div>\\n      );\\n    } else {\\n      content = (\\n        <NavigationSideMenu\\n          id=\\\"test-menu\\\"\\n          menuItems={[\\n            { key: 'menu', text: 'Menu', childKeys: ['submenu1', 'submenu2', 'submenu3', 'submenu4'] },\\n            {\\n              key: 'submenu1', text: 'Sub Menu 1', childKeys: ['subsubmenu1', 'subsubmenu2', 'subsubmenu3'], id: 'test-item-1',\\n            },\\n            { key: 'submenu2', text: 'Sub Menu 2' },\\n            { key: 'submenu3', text: 'Sub Menu 3' },\\n            { key: 'submenu4', text: 'Sub Menu 4' },\\n            { key: 'subsubmenu1', text: 'Sub-Sub Menu 1', id: 'test-item-2' },\\n            { key: 'subsubmenu2', text: 'Sub-Sub Menu 2' },\\n            { key: 'subsubmenu3', text: 'Sub-Sub Menu 3' },\\n          ]}\\n          onChange={this.handleOnChange}\\n          routingStackBack={this.fakeRoutingBack}\\n          selectedMenuKey={this.state.selectedMenuKey}\\n          selectedChildKey={this.state.selectedChildKey}\\n        />\\n      );\\n    }\\n\\n    return (\\n      <div className={cx('content-wrapper')}>\\n        {content}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default NavigationSideMenuDefault;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _package = require(\"../../../../package.json\");\n\nvar _README = _interopRequireDefault(require(\"../../../../docs/README.md\"));\n\nvar _NavigationSideMenu = _interopRequireDefault(require(\"!raw-loader!../../../../src/NavigationSideMenu.jsx\"));\n\nvar _NavigationSideMenuExample = _interopRequireDefault(require(\"../example/NavigationSideMenuExample\"));\n\nvar _NavigationSideMenuExample2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/NavigationSideMenuExample.jsx\"));\n\n// Component Source\n// Examples\nvar DocPage = function DocPage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: _package.name,\n    readme: _README.default,\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/\".concat(_package.name),\n    examples: [{\n      title: 'Navigation Side Menu Example',\n      example: _react.default.createElement(_NavigationSideMenuExample.default, null),\n      source: _NavigationSideMenuExample2.default\n    }],\n    propsTables: [{\n      componentSrc: _NavigationSideMenu.default\n    }]\n  });\n};\n\nvar _default = DocPage;\nexports.default = _default;"],"sourceRoot":""}