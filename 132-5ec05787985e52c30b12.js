(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{1005:function(e,n){},1098:function(e,n,t){e.exports={"date-wrapper":"DatePickerExampleCommon-module__date-wrapper___2vTEQ"}},1378:function(e){e.exports=JSON.parse('{"name":"terra-date-picker","main":"lib/DatePicker.js","version":"4.25.0","description":"The terra-date-picker component provides users a way to enter or select a date from the date picker.","repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"keywords":["Cerner","Terra","terra-date-picker","DatePicker","UI"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"homepage":"https://github.com/cerner/terra-framework#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"dependencies":{"classnames":"^2.2.5","focus-trap-react":"^6.0.0","keycode-js":"^2.0.1","moment":"^2.21.0","prop-types":"^15.5.8","react-onclickoutside":"^6.7.1","react-portal":"^4.1.2","terra-breakpoints":"^2.0.0","terra-button":"^3.3.0","terra-form-field":"^3.1.0","terra-form-input":"^2.3.0","terra-icon":"^3.1.0","terra-popup":"^6.23.0","terra-responsive-element":"^5.0.0","terra-visually-hidden-text":"^2.0.0"},"devDependencies":{"terra-doc-template":"^2.2.0"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","jest":"jest --config ../../jestconfig.js","wdio-default":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio-fusion":"cd ../.. && THEME=orion-fusion-theme npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio":"npm run wdio-default && npm run wdio-fusion"}}')},1883:function(e,n,t){"use strict";t.r(n),n.default="# Terra Date Picker Field\n\n[terra-date-picker](https://github.com/cerner/terra-framework/tree/master/packages/terra-date-picker) component that is wrapped inside a\n[terra-form-field](https://github.com/cerner/terra-core/tree/master/packages/terra-form-field) component.\n\n## Getting Started\n\n- Install with [npmjs](https://www.npmjs.com):\n  - `npm install terra-date-picker`\n\n## Implementation Notes:\nDatePickerField is required to be composed inside the [Base](https://github.com/cerner/terra-core/tree/master/packages/terra-base/docs) component with locale in order for it to load the correct date format and translation strings.\n\n## Component Features\n* [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n* [Responsive Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#responsive-support)\n* [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n* [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n* [Localization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n"},1884:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport PropTypes from 'prop-types';\nimport Field from 'terra-form-field';\nimport IconError from 'terra-icon/lib/icon/IconError';\nimport DatePicker from './DatePicker';\n\nconst propTypes = {\n  /**\n   * The DatePicker identifier. Links the htmlFor of the field to the select identifier.\n   */\n  datePickerId: PropTypes.string.isRequired,\n  /**\n   * Whether the date input should be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Error message for when the input is invalid. This will only be displayed if isInvalid is true.\n   */\n  error: PropTypes.node,\n  /**\n   * Error Icon to display when the input is invalid.\n   */\n  errorIcon: PropTypes.element,\n  /**\n   * An array of ISO 8601 string representation of the dates to disable in the picker.\n   */\n  excludeDates: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * A function that gets called for each date in the picker to evaluate which date should be disabled.\n   * A return value of true will be enabled and false will be disabled.\n   */\n  filterDate: PropTypes.func,\n  /**\n   * Help element to display with the input.\n   */\n  help: PropTypes.node,\n  /**\n   * Whether or not to hide the required indicator on the label.\n   */\n  hideRequired: PropTypes.bool,\n  /**\n  * Whether the field displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.\n  */\n  isIncomplete: PropTypes.bool,\n  /**\n   * Whether or not the field is an inline field.\n   */\n  isInline: PropTypes.bool,\n  /**\n  * Whether the field displays as Invalid. Use when value does not meet validation pattern.\n  */\n  isInvalid: PropTypes.bool,\n  /**\n   * Whether or not the label is visible. Use this props to hide a label while still creating it on the DOM for accessibility.\n   */\n  isLabelHidden: PropTypes.bool,\n  /**\n   * An array of ISO 8601 string representation of the dates to enable in the picker. All Other dates will be disabled.\n   */\n  includeDates: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Custom input attributes to apply to the date input. Use the name prop to set the name for the input.\n   * Do not set the name in inputAttribute as it will be ignored.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  inputAttributes: PropTypes.object,\n  /**\n   * The label of the form control children.\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * Attributes to attach to the label.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  labelAttrs: PropTypes.object,\n  /**\n   * An ISO 8601 string representation of the maximum date that can be selected.\n   */\n  maxDate: PropTypes.string,\n  /**\n   * An ISO 8601 string representation of the minimum date that can be selected.\n   */\n  minDate: PropTypes.string,\n  /**\n   * Name of the date input. The name should be unique.\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * A callback function triggered when the date picker component loses focus.\n   * This event does not get triggered when the focus is moved from the date input to the calendar button since the focus is still within the main date picker component.\n   */\n  onBlur: PropTypes.func,\n  /**\n   * A callback function to execute when a valid date is selected or entered.\n   * The first parameter is the event. The second parameter is the changed date value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * A callback function to execute when a change is made in the date input.\n   * The first parameter is the event. The second parameter is the changed date value.\n   */\n  onChangeRaw: PropTypes.func,\n  /**\n   * A callback function to execute when clicking outside of the picker to dismiss it.\n   */\n  onClickOutside: PropTypes.func,\n  /**\n   * A callback function triggered when the date picker component receives focus.\n   * This event does not get triggered when the focus is moved from the date input to the calendar button since the focus is still within the main date picker component.\n   */\n  onFocus: PropTypes.func,\n  /**\n   * A callback function to execute when a date is selected from within the picker.\n   */\n  onSelect: PropTypes.func,\n  /**\n   * Whether or not the date field is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Set the max-width of a field using `length` or `%`.  Best practice recommendation to never exceed\n   * a rendered value of 1020px. _(Note: Providing custom inline styles will take precedence.)_\n   */\n  maxWidth: PropTypes.string,\n  /**\n   * An ISO 8601 string representation of the initial value to show in the date input.\n   * This prop name is derived from react-datepicker but is analogous to value in a form input field.\n   */\n  selectedDate: PropTypes.string,\n  /**\n   * Whether or not to append the 'optional' label to a non-required field label.\n   */\n  showOptional: PropTypes.bool,\n};\n\nconst defaultProps = {\n  disabled: false,\n  error: null,\n  errorIcon: <IconError />,\n  excludeDates: undefined,\n  filterDate: undefined,\n  help: null,\n  hideRequired: false,\n  includeDates: undefined,\n  inputAttributes: undefined,\n  isIncomplete: false,\n  isInline: false,\n  isInvalid: false,\n  isLabelHidden: false,\n  labelAttrs: {},\n  maxDate: undefined,\n  maxWidth: undefined,\n  minDate: undefined,\n  onBlur: undefined,\n  onChange: undefined,\n  onChangeRaw: undefined,\n  onClickOutside: undefined,\n  onFocus: undefined,\n  onSelect: undefined,\n  required: false,\n  selectedDate: undefined,\n  showOptional: false,\n};\n\nconst DatePickerField = (props) => {\n  const {\n    datePickerId,\n    disabled,\n    inputAttributes,\n    error,\n    errorIcon,\n    excludeDates,\n    filterDate,\n    help,\n    hideRequired,\n    isIncomplete,\n    isInvalid,\n    isInline,\n    isLabelHidden,\n    includeDates,\n    label,\n    labelAttrs,\n    maxDate,\n    minDate,\n    maxWidth,\n    name,\n    onBlur,\n    onChange,\n    onChangeRaw,\n    onClickOutside,\n    onFocus,\n    onSelect,\n    required,\n    selectedDate,\n    showOptional,\n    ...customProps\n  } = props;\n\n  let ariaDescriptionIds;\n\n  if (help && error && isInvalid) {\n    ariaDescriptionIds = `${datePickerId}-error ${datePickerId}-help`;\n  } else {\n    if (help) {\n      ariaDescriptionIds = `${datePickerId}-help`;\n    }\n\n    if (error && isInvalid) {\n      ariaDescriptionIds = `${datePickerId}-error`;\n    }\n  }\n\n  let mergedInputAttrs = inputAttributes;\n  if (ariaDescriptionIds) {\n    mergedInputAttrs = { 'aria-describedby': ariaDescriptionIds, ...inputAttributes };\n  }\n\n  return (\n    <Field\n      {...customProps}\n      label={label}\n      labelAttrs={labelAttrs}\n      error={error}\n      help={help}\n      hideRequired={hideRequired}\n      required={required}\n      showOptional={showOptional}\n      isInvalid={isInvalid}\n      isInline={isInline}\n      isLabelHidden={isLabelHidden}\n      htmlFor={datePickerId}\n      maxWidth={maxWidth}\n    >\n      <DatePicker\n        disabled={disabled}\n        id={datePickerId}\n        inputAttribute={mergedInputAttrs}\n        excludeDates={excludeDates}\n        filterDate={filterDate}\n        includeDates={includeDates}\n        isInvalid={isInvalid}\n        isIncomplete={isIncomplete}\n        maxDate={maxDate}\n        minDate={minDate}\n        name={name}\n        onBlur={onBlur}\n        onChange={onChange}\n        onChangeRaw={onChangeRaw}\n        onClickOutside={onClickOutside}\n        onFocus={onFocus}\n        onSelect={onSelect}\n        required={required}\n        selectedDate={selectedDate}\n      />\n    </Field>\n  );\n};\n\nDatePickerField.propTypes = propTypes;\nDatePickerField.defaultProps = defaultProps;\n\nexport default DatePickerField;\n"},1885:function(e,n,t){"use strict";var r=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=r(t(18)),a=r(t(20)),o=r(t(22)),s=r(t(23)),d=r(t(24)),l=r(t(27)),p=r(t(25)),c=r(t(0)),u=r(t(4)),h=r(t(2)),m=r(t(1008)),f=r(t(1098)),b=u.default.bind(f.default),g={selectedDate:h.default.node},k=function(e){function n(e){var t;return(0,a.default)(this,n),(t=(0,s.default)(this,(0,d.default)(n).call(this,e))).state={date:t.props.selectedDate},t.handleDateChange=t.handleDateChange.bind((0,l.default)(t)),t}return(0,p.default)(n,e),(0,o.default)(n,[{key:"handleDateChange",value:function(e,n){this.setState({date:n})}},{key:"render",value:function(){return c.default.createElement("div",null,c.default.createElement("p",null,"Selected ISO Date:",c.default.createElement("span",{className:b("date-wrapper")},this.state.date)),c.default.createElement(m.default,(0,i.default)({label:"Enter Date",name:"date-input",datePickerId:"default-field",onChange:this.handleDateChange},this.props)))}}]),n}(c.default.Component);k.propTypes=g,k.defaultProps={selectedDate:""};var D=k;n.default=D},1886:function(e,n,t){"use strict";t.r(n),n.default="import React from 'react';\nimport classNames from 'classnames/bind';\nimport PropTypes from 'prop-types';\nimport DatePickerField from 'terra-date-picker';\nimport styles from './DatePickerExampleCommon.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The current DatePicker date if selected. Use for the selected date message.\n   */\n  selectedDate: PropTypes.node,\n};\n\nconst defaultProps = {\n  selectedDate: '',\n};\n\nclass DatePickerExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: this.props.selectedDate };\n    this.handleDateChange = this.handleDateChange.bind(this);\n  }\n\n  handleDateChange(event, date) {\n    this.setState({ date });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>\n          Selected ISO Date:\n          <span className={cx('date-wrapper')}>{this.state.date}</span>\n        </p>\n        <DatePickerField\n          label=\"Enter Date\"\n          name=\"date-input\"\n          datePickerId=\"default-field\"\n          onChange={this.handleDateChange}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nDatePickerExample.propTypes = propTypes;\nDatePickerExample.defaultProps = defaultProps;\n\nexport default DatePickerExample;\n"},2324:function(e,n,t){"use strict";var r=t(5);Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=r(t(0)),a=r(t(1004)),o=r(t(1883)),s=t(1378),d=r(t(1884)),l=r(t(1885)),p=r(t(1886)),c=function(){return i.default.createElement(a.default,{packageName:s.name,readme:o.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(s.name),examples:[{title:"Date Picker Field",example:i.default.createElement(l.default,null),source:p.default}],propsTables:[{componentName:"Date Picker Field",componentSrc:d.default}]})};n.default=c}}]);
//# sourceMappingURL=132-5ec05787985e52c30b12.js.map