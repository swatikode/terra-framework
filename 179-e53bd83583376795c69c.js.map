{"version":3,"sources":["webpack:///./packages/terra-form-validation/lib/FormValidationUtil.js","webpack:///./packages/terra-form-validation/docs/NumericValidation.md","webpack:///./packages/terra-form-validation/lib/terra-dev-site/doc/example/NumericValidation.js","webpack:///./packages/terra-form-validation/src/terra-dev-site/doc/example/NumericValidation.jsx","webpack:///./packages/terra-form-validation/lib/terra-dev-site/doc/form-validation/NumericValidation.6.doc.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_typeof2","_classCallCheck2","_createClass2","_default","FormValidationUtil","this","key","maximum","String","isFinite","Number","isInteger","length","minimum","test","chars","constructor","Array","i","includes","precision","valueSplit","split","parseFloat","_defineProperty2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_react","_reactFinalForm","_InputField","_terraButton","_terraSpacer","_FormValidationUtil","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","validateNumber","isOverMinValue","isUnderMaxValue","isPrecise","Example","_React$Component","props","_this","call","state","submitForm","bind","values","setState","submittedValues","_ref","handleSubmit","createElement","noValidate","onSubmit","Field","name","validate","_ref2","input","meta","inputId","label","error","isInvalid","undefined","inputAttrs","type","onChange","e","required","text","Opts","Types","SUBMIT","marginBottom","Form","render","renderForm","initialValues","numExample","errors","JSON","stringify","Component","_terraDocTemplate","_NumericValidation","_NumericValidation2","_NumericValidation3","readme","examples","title","example"],"mappings":"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","file":"179-e53bd83583376795c69c.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable no-restricted-globals */\nvar FormValidationUtil =\n/*#__PURE__*/\nfunction () {\n  function FormValidationUtil() {\n    (0, _classCallCheck2.default)(this, FormValidationUtil);\n  }\n\n  (0, _createClass2.default)(FormValidationUtil, null, [{\n    key: \"isUnderMaxLength\",\n\n    /* Checks given value's length against maximum. Returns true if value's length is less than or equal to the maximum.\n     * @value is the value string, @maximum is a nonnegative whole number. */\n    value: function isUnderMaxLength(value, maximum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof maximum === 'number' && isFinite(maximum)) || maximum < 0 || !Number.isInteger(maximum)) {\n        return false;\n      }\n\n      return value.length <= maximum;\n    }\n    /* Checks given value's length against minimum. Returns true if value's length is greater than or equal to the minimum.\n     * @value is the value string, @minimum is a nonnegative whole number. */\n\n  }, {\n    key: \"isOverMinLength\",\n    value: function isOverMinLength(value, minimum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof minimum === 'number' && isFinite(minimum)) || minimum < 0 || !Number.isInteger(minimum)) {\n        return false;\n      }\n\n      return value.length >= minimum;\n    }\n    /* Checks given value for extraneous whitespace. return true if there is no whitespace.\n     * @value is the value string */\n\n  }, {\n    key: \"hasNoWhitespace\",\n    value: function hasNoWhitespace(value) {\n      if (!(typeof value === 'string' || value instanceof String)) {\n        return false;\n      }\n\n      return !/\\s/.test(value);\n    }\n    /* Checks given value for any string in given array. return true if value does not contain any of them.\n     * @value is the value string, @chars is an array of strings  */\n\n  }, {\n    key: \"containsCharacters\",\n    value: function containsCharacters(value, chars) {\n      if (!(typeof value === 'string' || value instanceof String) || !(chars && (0, _typeof2.default)(chars) === 'object' && chars.constructor === Array)) {\n        return false;\n      }\n\n      for (var i = 0; i < chars.length; i += 1) {\n        if (value.includes(chars[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /* Checks given value against a minimum value. Returns true if value is greater then or equal to the minimum\n     * @value is the value string, @minimum is the minimum numeric value  */\n\n  }, {\n    key: \"isOverMinValue\",\n    value: function isOverMinValue(value, minimum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof minimum === 'number' && isFinite(minimum))) {\n        return false;\n      }\n\n      return value >= minimum;\n    }\n    /* Checks given value against a maximum value. Returns true if value is less then or equal to the maximum\n     * @value is the value string, @maximum is the maximum numeric value  */\n\n  }, {\n    key: \"isUnderMaxValue\",\n    value: function isUnderMaxValue(value, maximum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof maximum === 'number' && isFinite(maximum))) {\n        return false;\n      }\n\n      return value <= maximum;\n    }\n    /* Checks given value for a specific level of precision. Returns true if value has less than or an equal amount of precision\n     * @value is the value string, @precision is a nonnegative whole number  */\n\n  }, {\n    key: \"isPrecise\",\n    value: function isPrecise(value, precision) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof precision === 'number' && isFinite(precision)) || precision < 0 || !Number.isInteger(precision)) {\n        return false;\n      }\n\n      var valueSplit = value.split('.');\n\n      if (valueSplit.length === 2 && valueSplit[1].length > precision) {\n        return false;\n      }\n\n      return true;\n    }\n    /* Checks given value for if it is a negative value. Returns true if it is nonnegative.\n     * @value is the value string */\n\n  }, {\n    key: \"isNonnegative\",\n    value: function isNonnegative(value) {\n      if (!(typeof value === 'string' || value instanceof String)) {\n        return false;\n      }\n\n      return parseFloat(value) >= 0;\n    }\n  }]);\n  return FormValidationUtil;\n}();\n\nvar _default = FormValidationUtil;\nexports.default = _default;","export default \"# Making a Numeric Input With Minimum, Maximum, and Precision Validations\\n\\nSince this is a more in depth view of validation, we're going to just start with some provided code and add to it as needed.\\n\\n```javascript\\nimport React from 'react';\\nimport { Form, Field } from 'react-final-form';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport Button from 'terra-button';\\nimport Spacer from 'terra-spacer';\\n\\nconst validateNumber = (value) => {\\n  if (!value) { return undefined; }\\n\\n  return undefined;\\n};\\n\\nexport default class Example extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {};\\n    this.submitForm = this.submitForm.bind(this);\\n  }\\n\\n  submitForm(values) {\\n    this.setState({\\n      submittedValues: values,\\n    });\\n  }\\n\\n  renderForm({ handleSubmit }) {\\n    return (\\n      <form\\n        noValidate\\n        onSubmit={handleSubmit}\\n      >\\n        <Field\\n          name=\\\"numExample\\\"\\n          validate={validateNumber}\\n        >\\n          {({ input, meta }) => (\\n            <InputField\\n              inputId=\\\"numExample\\\"\\n              label=\\\"Numeric Example\\\"\\n              error={meta.error}\\n              isInvalid={meta.error !== undefined}\\n              inputAttrs={{\\n                type: 'number',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n              required\\n            />\\n          )}\\n        </Field>\\n        <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n      </form>\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n        <Form\\n          onSubmit={this.submitForm}\\n          render={this.renderForm}\\n          initialValues={{ numExample: '' }}\\n          validate={(values) => {\\n            const errors = {};\\n\\n            if (!values.numExample) {\\n              errors.numExample = 'Required';\\n            }\\n\\n            return errors;\\n          }}\\n        />\\n        {this.state.submittedValues\\n          && (\\n          <div>\\n            <p>Form Submitted Successfully With</p>\\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\\n          </div>\\n          )\\n        }\\n      </Spacer>\\n    );\\n  }\\n}\\n```\\n\\nWe have a simple number type input with validation, tied to the `<Form>` component, that checks whether we have a value for the input.\\n\\nWe also have our `<Field>`'s validation function defined and ready to be added to, with it only having a basic check to see if there is a value.\\n\\nWe have added browser enforcement on the inputted value by passing `type: 'number'` into `<Inputfield>`'s `inputAttrs`.\\n\\nNote that specifying `type: 'number'` still allows negatives and decimal points, such as `--1` or `2.0.32`. These will be placed in the field as `undefined`. With our code, we will just return a value of `Required`, via the `<Form>`'s validation function, if values are undefined.\\n\\nSecond thing - our validation function, `validateNumber`, will be given a *string*, despite the input being of `type: 'number'`. This does not impact simple operators but is useful to know when building custom validation functions.\\n\\nLet's start by giving a minimum and maximum to our value. For simplicity, set a minimum to 10 and a maximum to 100.\\n\\n```diff\\nconst validateNumber = (value) => {\\n  if (!value) { return undefined; }\\n+ var numericValue = Number(value);\\n+ if (numericValue < 10) {\\n+   return 'Value should not be less than 10.';\\n+ }\\n+ if (numericValue > 100) {\\n+   return 'Value should not be over 100.';\\n+ }\\n\\n  return undefined;\\n};\\n```\\n\\nNow, let's check for precision. For this example, lets validate to the thousandth place (three decimal places). Since our value is a string, we'll use string functions to validate.\\n\\nUse `.` as a delimiter and check for a length less than or equal to 3.\\n\\n```diff\\nconst validateNumber = (value) => {\\n  ...\\n+ const valueSplit = value.split('.');\\n+ if (valueSplit.length === 2 && valueSplit[1].length > 3) {\\n+   return 'Value has more than 3 decimal points';\\n+ }\\n\\n  return undefined;\\n};\\n```\\n\\nThis validation has a quirk. If the input contains extra `0`s, like `23.0230000`, validation will fail.\\n\\nLet's try a different way of validating. Using the `Number` converted value instead, we can use the `toFixed` function to automatically set precision, and use this as a comparison.\\n\\n```diff\\nconst validateNumber = (value) => {\\n  if (!value) { return undefined; }\\n  var numericValue = Number(value);\\n  ...\\n- const valueSplit = value.split('.');\\n- if (valueSplit.length === 2 && valueSplit[1].length > 3) {\\n+ if (numericValue.toFixed(3) != numericValue) {\\n    return 'Value has more than 3 decimal points';\\n  }\\n\\n  return undefined;\\n};\\n```\\n\\nThis validation has the opposite quirk. If the input contains extra `0`s, like `23.0230000`, validation will succeed.\\n\\nWith this we have a function that we can add to validate a number based by having a minimum, maximum, and a certain level of precision required. In the same vein as the 'Max Length Input' example, we can use the `FormValidationUtil` to help control and reduce some of workflow.\\n\\n```diff\\nconst validateNumber = (value) => {\\n   if (!value) { return undefined; }\\n-  var numericValue = Number(value);\\n-  if (numericValue < 10) {\\n+  if (!FormValidationUtil.isOverMinValue(value, 10)) {\\n    return 'Value should not be less than 10.';\\n  }\\n-  if (numericValue > 100) {\\n+  if (!FormValidationUtil.isUnderMaxValue(value, 100)) {\\n    return 'Value should not be over 100.';\\n  }\\n- if (numericValue.toFixed(3) != numericValue) {\\n+ if (!FormValidationUtil.isPrecise(value, 3)) {\\n    return 'Value has more than 3 decimal points';\\n  }\\n\\n  return undefined;\\n};\\n```\\n\\nNote: The `FormValidationUtil.precisionCheck` function uses the method where we split the `String` value to check precision.\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactFinalForm = require(\"react-final-form\");\n\nvar _InputField = _interopRequireDefault(require(\"terra-form-input/lib/InputField\"));\n\nvar _terraButton = _interopRequireDefault(require(\"terra-button\"));\n\nvar _terraSpacer = _interopRequireDefault(require(\"terra-spacer\"));\n\nvar _FormValidationUtil = _interopRequireDefault(require(\"../../../FormValidationUtil\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar validateNumber = function validateNumber(value) {\n  if (!_FormValidationUtil.default.isOverMinValue(value, 10)) {\n    return 'Value should not be less than 10.';\n  }\n\n  if (!_FormValidationUtil.default.isUnderMaxValue(value, 100)) {\n    return 'Value should not be over 100.';\n  }\n\n  if (!_FormValidationUtil.default.isPrecise(value, 3)) {\n    return 'Value has more than 3 decimal points';\n  }\n\n  return undefined;\n};\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Example, _React$Component);\n\n  function Example(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Example);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Example).call(this, props));\n    _this.state = {};\n    _this.submitForm = _this.submitForm.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(Example, [{\n    key: \"submitForm\",\n    value: function submitForm(values) {\n      this.setState({\n        submittedValues: values\n      });\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm(_ref) {\n      var handleSubmit = _ref.handleSubmit;\n      return _react.default.createElement(\"form\", {\n        noValidate: true,\n        onSubmit: handleSubmit\n      }, _react.default.createElement(_reactFinalForm.Field, {\n        name: \"numExample\",\n        validate: validateNumber\n      }, function (_ref2) {\n        var input = _ref2.input,\n            meta = _ref2.meta;\n        return _react.default.createElement(_InputField.default, {\n          inputId: \"numExample\",\n          label: \"Numeric Example\",\n          error: meta.error,\n          isInvalid: meta.error !== undefined,\n          inputAttrs: _objectSpread({\n            type: 'number'\n          }, input),\n          onChange: function onChange(e) {\n            input.onChange(e.target.value);\n          },\n          value: input.value,\n          required: true\n        });\n      }), _react.default.createElement(_terraButton.default, {\n        text: \"Submit\",\n        type: _terraButton.default.Opts.Types.SUBMIT\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_terraSpacer.default, {\n        marginBottom: \"small\"\n      }, _react.default.createElement(_reactFinalForm.Form, {\n        onSubmit: this.submitForm,\n        render: this.renderForm,\n        initialValues: {\n          numExample: ''\n        },\n        validate: function validate(values) {\n          var errors = {};\n\n          if (!values.numExample) {\n            errors.numExample = 'Required';\n          }\n\n          return errors;\n        }\n      }), this.state.submittedValues && _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Form Submitted Successfully With\"), _react.default.createElement(\"pre\", null, JSON.stringify(this.state.submittedValues, 0, 2))));\n    }\n  }]);\n  return Example;\n}(_react.default.Component);\n\nexports.default = Example;","export default \"/* eslint-disable class-methods-use-this */\\n\\nimport React from 'react';\\nimport { Form, Field } from 'react-final-form';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport Button from 'terra-button';\\nimport Spacer from 'terra-spacer';\\nimport FormValidationUtil from '../../../FormValidationUtil';\\n\\nconst validateNumber = (value) => {\\n  if (!FormValidationUtil.isOverMinValue(value, 10)) {\\n    return 'Value should not be less than 10.';\\n  }\\n  if (!FormValidationUtil.isUnderMaxValue(value, 100)) {\\n    return 'Value should not be over 100.';\\n  }\\n  if (!FormValidationUtil.isPrecise(value, 3)) {\\n    return 'Value has more than 3 decimal points';\\n  }\\n\\n  return undefined;\\n};\\n\\nexport default class Example extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {};\\n    this.submitForm = this.submitForm.bind(this);\\n  }\\n\\n  submitForm(values) {\\n    this.setState({\\n      submittedValues: values,\\n    });\\n  }\\n\\n  renderForm({ handleSubmit }) {\\n    return (\\n      <form\\n        noValidate\\n        onSubmit={handleSubmit}\\n      >\\n        <Field\\n          name=\\\"numExample\\\"\\n          validate={validateNumber}\\n        >\\n          {({ input, meta }) => (\\n            <InputField\\n              inputId=\\\"numExample\\\"\\n              label=\\\"Numeric Example\\\"\\n              error={meta.error}\\n              isInvalid={meta.error !== undefined}\\n              inputAttrs={{\\n                type: 'number',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n              required\\n            />\\n          )}\\n        </Field>\\n        <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n      </form>\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n        <Form\\n          onSubmit={this.submitForm}\\n          render={this.renderForm}\\n          initialValues={{ numExample: '' }}\\n          validate={(values) => {\\n            const errors = {};\\n\\n            if (!values.numExample) {\\n              errors.numExample = 'Required';\\n            }\\n\\n            return errors;\\n          }}\\n        />\\n        {this.state.submittedValues\\n          && (\\n          <div>\\n            <p>Form Submitted Successfully With</p>\\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\\n          </div>\\n          )}\\n      </Spacer>\\n    );\\n  }\\n}\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _NumericValidation = _interopRequireDefault(require(\"../../../../docs/NumericValidation.md\"));\n\nvar _NumericValidation2 = _interopRequireDefault(require(\"../example/NumericValidation\"));\n\nvar _NumericValidation3 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/NumericValidation\"));\n\n// Example Files\nvar FormValidationExamples = function FormValidationExamples() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    readme: _NumericValidation.default,\n    examples: [{\n      title: 'Numeric Validations',\n      example: _react.default.createElement(_NumericValidation2.default, null),\n      source: _NumericValidation3.default\n    }]\n  });\n};\n\nvar _default = FormValidationExamples;\nexports.default = _default;"],"sourceRoot":""}