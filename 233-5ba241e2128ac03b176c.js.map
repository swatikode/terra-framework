{"version":3,"sources":["webpack:///./packages/terra-form-validation/lib/terra-dev-site/doc/example/DefaultFormValidation.js","webpack:///./packages/terra-form-validation/src/terra-dev-site/doc/example/DefaultFormValidation.jsx","webpack:///./packages/terra-form-validation/docs/README.md","webpack:///./packages/terra-form-validation/lib/terra-dev-site/doc/form-validation/FormValidation.1.doc.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_regenerator","_asyncToGenerator2","_react","_reactFinalForm","_InputField","_TextareaField","_terraButton","_terraSpacer","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","validateUniqueUser","_ref","mark","_callee","name","response","wrap","_context","prev","next","Promise","resolve","abrupt","stop","_x","this","MainEntry","_React$Component","props","_this","call","state","submitForm","bind","renderForm","values","setState","submittedValues","_ref2","handleSubmit","createElement","noValidate","onSubmit","Field","validate","_ref3","input","meta","inputId","label","error","isInvalid","submitFailed","valid","required","help","inputAttrs","placeholder","onChange","e","_ref4","text","type","Opts","Types","SUBMIT","JSON","stringify","marginBottom","Form","render","initialValues","description","errors","user_name","Component","_terraDocTemplate","_README","_DefaultFormValidation","_DefaultFormValidation2","_default","readme","examples","title","example"],"mappings":"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","file":"233-5ba241e2128ac03b176c.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactFinalForm = require(\"react-final-form\");\n\nvar _InputField = _interopRequireDefault(require(\"terra-form-input/lib/InputField\"));\n\nvar _TextareaField = _interopRequireDefault(require(\"terra-form-textarea/lib/TextareaField\"));\n\nvar _terraButton = _interopRequireDefault(require(\"terra-button\"));\n\nvar _terraSpacer = _interopRequireDefault(require(\"terra-spacer\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar validateUniqueUser =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(name) {\n    var response;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            response = new Promise(function (resolve) {\n              if (name !== 'TerraUser') {\n                return resolve('');\n              }\n\n              return resolve('Name is Unavailable');\n            });\n            _context.next = 3;\n            return response;\n\n          case 3:\n            return _context.abrupt(\"return\", response);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateUniqueUser(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar MainEntry =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(MainEntry, _React$Component);\n\n  function MainEntry(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, MainEntry);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(MainEntry).call(this, props));\n    _this.state = {};\n    _this.submitForm = _this.submitForm.bind((0, _assertThisInitialized2.default)(_this));\n    _this.renderForm = _this.renderForm.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(MainEntry, [{\n    key: \"submitForm\",\n    value: function submitForm(values) {\n      this.setState({\n        submittedValues: values\n      });\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm(_ref2) {\n      var handleSubmit = _ref2.handleSubmit;\n      return _react.default.createElement(\"form\", {\n        noValidate: true,\n        onSubmit: handleSubmit\n      }, _react.default.createElement(_reactFinalForm.Field, {\n        name: \"user_name\",\n        validate: validateUniqueUser\n      }, function (_ref3) {\n        var input = _ref3.input,\n            meta = _ref3.meta;\n        return _react.default.createElement(_InputField.default, {\n          inputId: \"user-name\",\n          label: \"User Name\",\n          error: meta.error,\n          isInvalid: meta.submitFailed && !meta.valid,\n          required: true,\n          help: \"TerraUser is not available\",\n          inputAttrs: _objectSpread({\n            placeholder: 'Description'\n          }, input),\n          onChange: function onChange(e) {\n            input.onChange(e.target.value);\n          },\n          value: input.value\n        });\n      }), _react.default.createElement(_reactFinalForm.Field, {\n        name: \"description\"\n      }, function (_ref4) {\n        var input = _ref4.input,\n            meta = _ref4.meta;\n        return _react.default.createElement(_TextareaField.default, {\n          inputId: \"description-field\",\n          label: \"Description\",\n          error: meta.error,\n          isInvalid: meta.submitFailed && !meta.valid,\n          inputAttrs: _objectSpread({\n            placeholder: 'Description'\n          }, input),\n          onChange: function onChange(e) {\n            input.onChange(e.target.value);\n          },\n          value: input.value,\n          required: true\n        });\n      }), _react.default.createElement(_terraButton.default, {\n        text: \"Submit\",\n        type: _terraButton.default.Opts.Types.SUBMIT\n      }), this.state.submittedValues && _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Form Submitted Successfully With\"), _react.default.createElement(\"pre\", null, JSON.stringify(this.state.submittedValues, 0, 2))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_terraSpacer.default, {\n        marginBottom: \"small\"\n      }, _react.default.createElement(_reactFinalForm.Form, {\n        onSubmit: this.submitForm,\n        render: this.renderForm,\n        initialValues: {\n          description: ''\n        },\n        validate: function validate(values) {\n          var errors = {};\n\n          if (!values.description) {\n            errors.description = 'Required';\n          }\n\n          if (!values.user_name) {\n            errors.user_name = 'Required';\n          }\n\n          return errors;\n        }\n      }));\n    }\n  }]);\n  return MainEntry;\n}(_react.default.Component);\n\nexports.default = MainEntry;","export default \"/* eslint-disable class-methods-use-this */\\n\\nimport React from 'react';\\nimport { Form, Field } from 'react-final-form';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\\nimport Button from 'terra-button';\\nimport Spacer from 'terra-spacer';\\n\\nconst validateUniqueUser = async (name) => {\\n  const response = new Promise((resolve) => {\\n    if (name !== 'TerraUser') {\\n      return resolve('');\\n    }\\n\\n    return resolve('Name is Unavailable');\\n  });\\n\\n  await response;\\n  return response;\\n};\\n\\nexport default class MainEntry extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {};\\n    this.submitForm = this.submitForm.bind(this);\\n    this.renderForm = this.renderForm.bind(this);\\n  }\\n\\n  submitForm(values) {\\n    this.setState({\\n      submittedValues: values,\\n    });\\n  }\\n\\n  renderForm({ handleSubmit }) {\\n    return (\\n      <form\\n        noValidate\\n        onSubmit={handleSubmit}\\n      >\\n        <Field\\n          name=\\\"user_name\\\"\\n          validate={validateUniqueUser}\\n        >\\n          {({ input, meta }) => (\\n            <InputField\\n              inputId=\\\"user-name\\\"\\n              label=\\\"User Name\\\"\\n              error={meta.error}\\n              isInvalid={meta.submitFailed && !meta.valid}\\n              required\\n              help=\\\"TerraUser is not available\\\"\\n              inputAttrs={{\\n                placeholder: 'Description',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n            />\\n          )}\\n        </Field>\\n        <Field\\n          name=\\\"description\\\"\\n        >\\n          {({ input, meta }) => (\\n            <TextareaField\\n              inputId=\\\"description-field\\\"\\n              label=\\\"Description\\\"\\n              error={meta.error}\\n              isInvalid={meta.submitFailed && !meta.valid}\\n              inputAttrs={{\\n                placeholder: 'Description',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n              required\\n            />\\n          )}\\n        </Field>\\n        <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n        {this.state.submittedValues\\n          && (\\n          <div>\\n            <p>Form Submitted Successfully With</p>\\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\\n          </div>\\n          )}\\n      </form>\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n        <Form\\n          onSubmit={this.submitForm}\\n          render={this.renderForm}\\n          initialValues={{ description: '' }}\\n          validate={(values) => {\\n            const errors = {};\\n\\n            if (!values.description) {\\n              errors.description = 'Required';\\n            }\\n\\n            if (!values.user_name) {\\n              errors.user_name = 'Required';\\n            }\\n\\n            return errors;\\n          }}\\n        />\\n      </Spacer>\\n    );\\n  }\\n}\\n\"","export default \"# Form Validation\\n\\nTerra recommends using [react-final-form](https://github.com/final-form/react-final-form) to write form validations for components. This package contains several different hooks and functionality for performing validations at various levels which include:\\n\\n- Validating onChange\\n- Validating onSubmit\\n- Validating Synchronously (Such as for unique user name implementations)\\n- Restricting inputs to a particular format.\\n\\nFor other functionality that is provided, consult [react-final-form documentation](https://github.com/final-form/react-final-form).\\n\\n\\n## Getting Started\\n\\n- Install from [npmjs](https://www.npmjs.com): `npm install terra-form-validation`\\n\\n<!-- AUTO-GENERATED-CONTENT:START Peer Dependencies -->\\n## Peer Dependencies\\n\\nThis component requires the following peer dependencies be installed in your app for the component to properly function.\\n\\n| Peer Dependency | Version |\\n|-|-|\\n| final-form | ^4.6.0 |\\n| react | ^16.8.5 |\\n| react-dom | ^16.8.5 |\\n| react-final-form | >=5.0.2 <7.0.0 |\\n\\n<!-- AUTO-GENERATED-CONTENT:END -->\\n\\n## Integration with Terra\\n\\nTo easily integrate react-final-form with Terra form elements, we have created individual Field components inside of terra-form-input (InputField), terra-form-textarea (TextareaField), terra-form-radio (RadioField) and terra-form-checkbox (CheckboxField). For integrating with terra-form-select components, a Select element can be combined with a terra-form-field component. There are future enhancements to add a Field component to terra-form-select.\\n\\nFor all of these field components, the isInvalid and error props of the Fields will be set from the data coming from react-final-form.\\n\\n## Usage\\n\\nreact-final-form consists of a wrapping Form element that houses the validation logic, and Field elements that validate individual inputs of a given form.\\n\\nTo start, you need to import the Form component from react-final-form, and set the onSubmit and render props of the Form. onSubmit is a function with a single argument that is an object of the submitted form values, and the render function is essentially a function that returns a native form rendered in react. The render function has several different props provided by react-final-form that can be used for creating your forms (see [form render props](https://github.com/final-form/react-final-form#formrenderprops) for all possible options). One thing to note is that inside the render function, handleSubmit needs to be passed into the native form component as well.\\n\\nWhen rendering individual fields inside the form, there are a few things that need to be done. The first is to create a Field component using the Field object from react-final-form, and setting the name, initial value, and validate props. Then inside the Field children, render a function with the arguments input and meta. The input prop contains information specific to the event such as value and name, and meta includes information related to field errors, submission state, validity status. You can view more of the provided attributes [here](https://github.com/final-form/react-final-form#fieldrenderprops). For immediate use, make sure that the function returns a form element with the onChange, value, and other input attributes set appropriately.\\n\\n**NOTE:** When using [react-final-form](https://github.com/final-form/react-final-form) for validation, we recommend disabling HTML5 form validation by adding the [`noValidate` boolean attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-novalidate) to your form element.\\n\\n```html\\n<form noValidate>\\n```\\n\\nTo get a visual on what the implementation looks like, see below:\\n\\n```jsx\\nimport React from 'react';\\nimport { Form, Field } from 'react-final-form';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport TextareaField from 'terra-form-textarea/lib/TextareaField';\\nimport Button from 'terra-button';\\nimport Spacer from 'terra-spacer';\\n\\nconst validateUniqueUser = async (name) => {\\n  const response = new Promise((resolve) => {\\n    if (name !== 'TerraUser') {\\n      return resolve('');\\n    }\\n\\n    return resolve('Name is Unavailable');\\n  });\\n\\n  await response;\\n  return response;\\n};\\n\\nexport default class MainEntry extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {};\\n    this.submitForm = this.submitForm.bind(this);\\n    this.renderForm = this.renderForm.bind(this);\\n  }\\n\\n  submitForm(values) {\\n    this.setState({\\n      submittedValues: values,\\n    });\\n  }\\n\\n  renderForm({ handleSubmit, pristine, invalid }) {\\n    return (\\n      <form\\n        noValidate\\n        onSubmit={handleSubmit}\\n      >\\n        <Field\\n          name=\\\"user_name\\\"\\n          validate={validateUniqueUser}\\n        >\\n          {({ input, meta }) => (\\n            <InputField\\n              inputId=\\\"user-name\\\"\\n              label=\\\"User Name\\\"\\n              error={meta.error}\\n              isInvalid={meta.submitFailed}\\n              required\\n              help=\\\"TerraUser is not available\\\"\\n              inputAttrs={{\\n                placeholder: 'Description',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n            />\\n          )}\\n        </Field>\\n        <Field\\n          name=\\\"description\\\"\\n        >\\n          {({ input, meta }) => (\\n            <TextareaField\\n              inputId=\\\"description-field\\\"\\n              label=\\\"Description\\\"\\n              error={meta.error}\\n              isInvalid={meta.submitFailed}\\n              inputAttrs={{\\n                placeholder: 'Description',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n              required\\n            />\\n          )}\\n        </Field>\\n        <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n        {this.state.submittedValues &&\\n          <div>\\n            <p>Form Submitted Successfully With</p>\\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\\n          </div>\\n        }\\n      </form>\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n        <Form\\n          onSubmit={this.submitForm}\\n          render={this.renderForm}\\n          initialValues={{ description: '' }}\\n        />\\n      </Spacer>\\n    );\\n  }\\n}\\n```\\n\\nSee links in the sidebar for working with additional validation events and writing custom validations.\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _README = _interopRequireDefault(require(\"../../../../docs/README.md\"));\n\nvar _DefaultFormValidation = _interopRequireDefault(require(\"../example/DefaultFormValidation\"));\n\nvar _DefaultFormValidation2 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/DefaultFormValidation\"));\n\n// Example Files\nvar FormValidationExamples = function FormValidationExamples() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    readme: _README.default,\n    examples: [{\n      title: 'Basic Form Validation Example',\n      example: _react.default.createElement(_DefaultFormValidation.default, null),\n      source: _DefaultFormValidation2.default\n    }]\n  });\n};\n\nvar _default = FormValidationExamples;\nexports.default = _default;"],"sourceRoot":""}