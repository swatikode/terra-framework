{"version":3,"sources":["webpack:///./packages/terra-navigation-prompt/docs/implementation-guide/IMPLEMENTATION_GUIDE_PART_1.md","webpack:///./packages/terra-navigation-prompt/lib/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart1.js","webpack:///./packages/terra-navigation-prompt/src/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart1.jsx","webpack:///./packages/terra-navigation-prompt/lib/terra-dev-site/doc/navigation-prompt/implementation-guide.1/Part1-AddingPrompts.2.doc.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","_slicedToArray2","_react","_propTypes","_terraNavigationPrompt","Form","_ref","title","ariaLabel","_useState","useState","_useState2","inputValue","setInputValue","createElement","length","description","undefined","type","onChange","event","target","onClick","propTypes","string","_default","_useState3","_useState4","activeForm","setActiveForm","formCheckpointRef","useRef","onSwitchForm","formKey","current","resolvePrompts","startMessage","rejectButtonText","acceptButtonText","buttonOrder","then","catch","disabled","bind","NavigationPromptCheckpoint","ref","key","_terraDocTemplate","_IMPLEMENTATION_GUIDE_PART_","_ImplementationGuidePart","_ImplementationGuidePart2","packageName","srcPath","readme","examples","example","source"],"mappings":"kHAAA,OAAe,qxI,kCCEf,IAAIA,EAA0BC,EAAQ,IAElCC,EAAyBD,EAAQ,GAErCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAkBN,EAAuBD,EAAQ,KAEjDQ,EAAST,EAAwBC,EAAQ,IAEzCS,EAAaR,EAAuBD,EAAQ,IAE5CU,EAAyBX,EAAwBC,EAAQ,MAEzDW,EAAO,SAAcC,GACvB,IAAIC,EAAQD,EAAKC,MACbC,EAAYF,EAAKE,UAEjBC,GAAY,EAAIP,EAAOQ,UAAU,IACjCC,GAAa,EAAIV,EAAgBD,SAASS,EAAW,GACrDG,EAAaD,EAAW,GACxBE,EAAgBF,EAAW,GAE/B,OAAOT,EAAOF,QAAQc,cAAc,MAAO,KAAMZ,EAAOF,QAAQc,cAAc,IAAK,KAAMP,GAAQK,EAAWG,OAASb,EAAOF,QAAQc,cAAcV,EAAuBJ,QAAS,CAChLgB,YAAaT,SACVU,EAAWf,EAAOF,QAAQc,cAAc,QAAS,CACpDI,KAAM,OACN,aAAcV,EACdW,SAAU,SAAkBC,GAC1BP,EAAcO,EAAMC,OAAOtB,QAE7BA,MAAOa,IACLV,EAAOF,QAAQc,cAAc,SAAU,CACzCI,KAAM,SACNI,QAAS,WACPT,EAAc,MAEf,YAGLR,EAAKkB,UAAY,CACfhB,MAAOJ,EAAWH,QAAQwB,OAC1BhB,UAAWL,EAAWH,QAAQwB,QAGhC,IAqCIC,EArCe,WACjB,IAAIC,GAAa,EAAIxB,EAAOQ,UAAU,UAClCiB,GAAa,EAAI1B,EAAgBD,SAAS0B,EAAY,GACtDE,EAAaD,EAAW,GACxBE,EAAgBF,EAAW,GAE3BG,GAAoB,EAAI5B,EAAO6B,UAEnC,SAASC,EAAaC,GACpBH,EAAkBI,QAAQC,eAAe,CACvC5B,MAAO,wCACP6B,aAAc,0CACdC,iBAAkB,mCAClBC,iBAAkB,mCAClBC,YAAa,gBACZC,MAAK,WACNX,EAAcI,MACbQ,OAAM,eAGX,OAAOvC,EAAOF,QAAQc,cAAc,MAAO,KAAMZ,EAAOF,QAAQc,cAAc,KAAM,KAAM,iBAAkBZ,EAAOF,QAAQc,cAAc,IAAK,KAAM,+GAAgHZ,EAAOF,QAAQc,cAAc,SAAU,CACzSI,KAAM,SACNwB,SAAyB,WAAfd,EACVN,QAASU,EAAaW,KAAK,KAAM,WAChC,oBAAqBzC,EAAOF,QAAQc,cAAc,SAAU,CAC7DI,KAAM,SACNwB,SAAyB,WAAfd,EACVN,QAASU,EAAaW,KAAK,KAAM,WAChC,oBAAqBzC,EAAOF,QAAQc,cAAcV,EAAuBwC,2BAA4B,CACtGC,IAAKf,GACJ5B,EAAOF,QAAQc,cAAcT,EAAM,CACpCE,MAAOqB,EACPkB,IAAKlB,EACLpB,UAAWoB,OAKf9B,EAAQE,QAAUyB,G,kCCxFlB,OAAe,2sE,kCCEf,IAAI9B,EAAyBD,EAAQ,GAErCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIE,EAASP,EAAuBD,EAAQ,IAExCqD,EAAoBpD,EAAuBD,EAAQ,OAEnDsD,EAA8BrD,EAAuBD,EAAQ,OAE7DuD,EAA2BtD,EAAuBD,EAAQ,OAE1DwD,EAA4BvD,EAAuBD,EAAQ,OAgB3D+B,EAb0B,WAC5B,OAAOvB,EAAOF,QAAQc,cAAciC,EAAkB/C,QAAS,CAC7DmD,YAAa,0BACbC,QAAS,yFACTC,OAAQL,EAA4BhD,QACpCsD,SAAU,CAAC,CACT/C,MAAO,4EACPgD,QAASrD,EAAOF,QAAQc,cAAcmC,EAAyBjD,QAAS,MACxEwD,OAAQN,EAA0BlD,aAMxCF,EAAQE,QAAUyB","file":"255-af29c4a844f7713131df.js","sourcesContent":["export default \"# Terra Navigation Prompt - Implementation Guide\\n\\n## Part 1 - Implementing the NavigationPrompt and NavigationPromptCheckpoint\\n\\nTo better notify the user of the Form's transient state, we update the Form to render a NavigationPrompt.\\n\\n```diff\\n- import React, { useState } from 'react';\\n+ import React, { useState, useRef } from 'react';\\nimport PropTypes from 'prop-types';\\n+ import NavigationPrompt, { NavigationPromptCheckpoint } from 'terra-navigation-prompt';\\n\\nconst Form = ({ title }) => {\\n  const [inputValue, setInputValue] = useState('');\\n\\n  return (\\n    <div>\\n      <p>{title}</p>\\n+     {inputValue.length ? <NavigationPrompt description={title} /> : undefined}\\n      <input\\n        type=\\\"text\\\"\\n        onChange={(event) => {\\n          setInputValue(event.target.value);\\n        }}\\n        value={inputValue}\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setInputValue('');\\n        }}\\n      >\\n        Submit\\n      </button>\\n    </div>\\n  );\\n};\\n```\\n\\nThe Form renders the NavigationPrompt when the input has a non-empty value. If it were to render the NavigationPrompt at all times, the user would be prompted inappropriately when the input is empty.\\n\\nThe Form provides its `title` prop as the NavigationPrompt's `description` prop to give it an identifying feature. The `description` doesn't need to be unique across all rendered NavigationPrompts, but it should give our users a good idea of where the unsaved changes are at. For our purposes, the Form's `title` is sufficient.\\n\\nNow that the Form is rendering a NavigationPrompt, the FormSwitcher needs to render a NavigationPromptCheckpoint around the Form to detect that prompt.\\n\\n```diff\\nconst FormSwitcher = () => {\\n  const [activeForm, setActiveForm] = useState('Form 1');\\n+ const formCheckpointRef = useRef();\\n\\n  function onSwitchForm(formKey) {\\n+   formCheckpointRef.current.resolvePrompts({\\n+     title: 'Descriptive Notification Prompt Title',\\n+     startMessage: 'Descriptive Notification Prompt Message',\\n+     rejectButtonText: `Descriptive Reject Button Action`,\\n+     acceptButtonText: 'Descriptive Accept Button Action',\\n+     buttonOrder: 'acceptFirst',\\n+   }).then(() => {\\n      setActiveForm(formKey);\\n+   });\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Form Switcher</h2>\\n-     <p>The NavigationPrompt is not implemented, so no prompting occurs.</p>\\n+     <p>The user will be prompted with the provided messaging when Forms are switched with unsaved changes present.</p>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 1'}\\n        onClick={onSwitchForm.bind(null, 'Form 1')}\\n      >\\n        Switch to Form 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 2'}\\n        onClick={onSwitchForm.bind(null, 'Form 2')}\\n      >\\n        Switch to Form 2\\n      </button>\\n+     <NavigationPromptCheckpoint\\n+       ref={formCheckpointRef}\\n+     >\\n        <Form title={activeForm} key={activeForm} />\\n+      </NavigationPromptCheckpoint>\\n    </div>\\n  );\\n};\\n```\\n\\nThe FormSwitcher gets a ref to the NavigationPromptCheckpoint; this example uses the [useRef hook](https://reactjs.org/docs/hooks-reference.html#useref), but any of the supported ref retrieval methods would be sufficient. The FormSwitcher then uses this ref to call the `resolvePrompts` function when it wants to switch to a new Form.\\n\\nThe `resolvePrompts` function is an instance function of the NavigationPromptCheckpoint. When `resolvePrompts` is called, the NavigationPromptCheckpoint will render a NotificationDialog and return a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises). The Promise will be resolved immediately if no NavigationPrompts have been rendered below the checkpoint, so we don't need to check for the presence of any NavigationPrompts before we call it. The Promise will also resolve if a user presses the NotificationDialog's accept action button. The Promise will reject if a user presses the NotificationDialog's reject action button. In our example, we only update the FormSwitcher's state when the Promise is resolved.\\n\\nWith those changes in place, the FormSwitcher will prompt the user for confirmation when they attempt to switch away from Forms with unsaved data.\\n\"","\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _terraNavigationPrompt = _interopRequireWildcard(require(\"terra-navigation-prompt\"));\n\nvar Form = function Form(_ref) {\n  var title = _ref.title,\n      ariaLabel = _ref.ariaLabel;\n\n  var _useState = (0, _react.useState)(''),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, title), inputValue.length ? _react.default.createElement(_terraNavigationPrompt.default, {\n    description: title\n  }) : undefined, _react.default.createElement(\"input\", {\n    type: \"text\",\n    \"aria-label\": ariaLabel,\n    onChange: function onChange(event) {\n      setInputValue(event.target.value);\n    },\n    value: inputValue\n  }), _react.default.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      setInputValue('');\n    }\n  }, \"Submit\"));\n};\n\nForm.propTypes = {\n  title: _propTypes.default.string,\n  ariaLabel: _propTypes.default.string\n};\n\nvar FormSwitcher = function FormSwitcher() {\n  var _useState3 = (0, _react.useState)('Form 1'),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      activeForm = _useState4[0],\n      setActiveForm = _useState4[1];\n\n  var formCheckpointRef = (0, _react.useRef)();\n\n  function onSwitchForm(formKey) {\n    formCheckpointRef.current.resolvePrompts({\n      title: 'Descriptive Notification Prompt Title',\n      startMessage: 'Descriptive Notification Prompt Message',\n      rejectButtonText: 'Descriptive Reject Button Action',\n      acceptButtonText: 'Descriptive Accept Button Action',\n      buttonOrder: 'acceptFirst'\n    }).then(function () {\n      setActiveForm(formKey);\n    }).catch(function () {});\n  }\n\n  return _react.default.createElement(\"div\", null, _react.default.createElement(\"h2\", null, \"Form Switcher\"), _react.default.createElement(\"p\", null, \"The user will be prompted with the provided messaging when Forms are switched with unsaved changes present.\"), _react.default.createElement(\"button\", {\n    type: \"button\",\n    disabled: activeForm === 'Form 1',\n    onClick: onSwitchForm.bind(null, 'Form 1')\n  }, \"Switch to Form 1\"), _react.default.createElement(\"button\", {\n    type: \"button\",\n    disabled: activeForm === 'Form 2',\n    onClick: onSwitchForm.bind(null, 'Form 2')\n  }, \"Switch to Form 2\"), _react.default.createElement(_terraNavigationPrompt.NavigationPromptCheckpoint, {\n    ref: formCheckpointRef\n  }, _react.default.createElement(Form, {\n    title: activeForm,\n    key: activeForm,\n    ariaLabel: activeForm\n  })));\n};\n\nvar _default = FormSwitcher;\nexports.default = _default;","export default \"import React, { useState, useRef } from 'react';\\nimport PropTypes from 'prop-types';\\nimport NavigationPrompt, { NavigationPromptCheckpoint } from 'terra-navigation-prompt';\\n\\nconst Form = ({ title, ariaLabel }) => {\\n  const [inputValue, setInputValue] = useState('');\\n\\n  return (\\n    <div>\\n      <p>{title}</p>\\n      {inputValue.length ? <NavigationPrompt description={title} /> : undefined}\\n      <input\\n        type=\\\"text\\\"\\n        aria-label={ariaLabel}\\n        onChange={(event) => {\\n          setInputValue(event.target.value);\\n        }}\\n        value={inputValue}\\n      />\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setInputValue('');\\n        }}\\n      >\\n        Submit\\n      </button>\\n    </div>\\n  );\\n};\\n\\nForm.propTypes = {\\n  title: PropTypes.string,\\n  ariaLabel: PropTypes.string,\\n};\\n\\nconst FormSwitcher = () => {\\n  const [activeForm, setActiveForm] = useState('Form 1');\\n  const formCheckpointRef = useRef();\\n\\n  function onSwitchForm(formKey) {\\n    formCheckpointRef.current.resolvePrompts({\\n      title: 'Descriptive Notification Prompt Title',\\n      startMessage: 'Descriptive Notification Prompt Message',\\n      rejectButtonText: 'Descriptive Reject Button Action',\\n      acceptButtonText: 'Descriptive Accept Button Action',\\n      buttonOrder: 'acceptFirst',\\n    }).then(() => {\\n      setActiveForm(formKey);\\n    }).catch(() => {\\n    });\\n  }\\n\\n  return (\\n    <div>\\n      <h2>Form Switcher</h2>\\n      <p>The user will be prompted with the provided messaging when Forms are switched with unsaved changes present.</p>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 1'}\\n        onClick={onSwitchForm.bind(null, 'Form 1')}\\n      >\\n        Switch to Form 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        disabled={activeForm === 'Form 2'}\\n        onClick={onSwitchForm.bind(null, 'Form 2')}\\n      >\\n        Switch to Form 2\\n      </button>\\n      <NavigationPromptCheckpoint\\n        ref={formCheckpointRef}\\n      >\\n        <Form title={activeForm} key={activeForm} ariaLabel={activeForm} />\\n      </NavigationPromptCheckpoint>\\n    </div>\\n  );\\n};\\n\\nexport default FormSwitcher;\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _IMPLEMENTATION_GUIDE_PART_ = _interopRequireDefault(require(\"../../../../../docs/implementation-guide/IMPLEMENTATION_GUIDE_PART_1.md\"));\n\nvar _ImplementationGuidePart = _interopRequireDefault(require(\"../examples/ImplementationGuidePart1\"));\n\nvar _ImplementationGuidePart2 = _interopRequireDefault(require(\"!raw-loader!../../../../../src/terra-dev-site/doc/navigation-prompt/examples/ImplementationGuidePart1\"));\n\n// Example Files\nvar ImplementationGuidePage = function ImplementationGuidePage() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    packageName: \"terra-navigation-prompt\",\n    srcPath: \"https://github.com/cerner/terra-framework/tree/master/packages/terra-navigation-prompt\",\n    readme: _IMPLEMENTATION_GUIDE_PART_.default,\n    examples: [{\n      title: 'Part 1 - Implementing the NavigationPrompt and NavigationPromptCheckpoint',\n      example: _react.default.createElement(_ImplementationGuidePart.default, null),\n      source: _ImplementationGuidePart2.default\n    }]\n  });\n};\n\nvar _default = ImplementationGuidePage;\nexports.default = _default;"],"sourceRoot":""}