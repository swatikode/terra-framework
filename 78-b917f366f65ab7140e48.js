(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{1005:function(e,t){},1018:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(163)),l=r(n(18)),d=r(n(28)),o=a(n(0)),u=r(n(2)),s=n(7),p=r(n(4)),c=r(n(166)),m=r(n(359)),f=r(n(165)),g=r(n(1028)),b=r(n(1024));function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var I=p.default.bind(b.default),y={legend:u.default.string.isRequired,name:u.default.string.isRequired,dayAttributes:u.default.object,disabled:u.default.bool,displayFormat:u.default.string,error:u.default.node,help:u.default.node,hideRequired:u.default.bool,isIncomplete:u.default.bool,isInline:u.default.bool,isInvalid:u.default.bool,isLegendHidden:u.default.bool,legendAttributes:u.default.object,monthAttributes:u.default.object,maxWidth:u.default.string,onBlur:u.default.func,onChange:u.default.func,onFocus:u.default.func,required:u.default.bool,showOptional:u.default.bool,value:u.default.string,yearAttributes:u.default.object},F={dayAttributes:{},disabled:!1,displayFormat:void 0,error:null,help:null,hideRequired:!1,isIncomplete:!1,isInline:!1,isInvalid:!1,isLegendHidden:!1,legendAttributes:{},monthAttributes:{},maxWidth:void 0,onBlur:void 0,onChange:void 0,onFocus:void 0,required:!1,showOptional:!1,value:"",yearAttributes:{}},x=function(e){var t=e.dayAttributes,n=e.disabled,a=e.displayFormat,r=e.error,i=e.help,u=e.hideRequired,p=e.isIncomplete,b=e.isInline,v=e.isInvalid,y=e.isLegendHidden,F=e.legend,x=e.legendAttributes,D=e.monthAttributes,E=(e.maxWidth,e.name),_=e.onBlur,S=e.onChange,T=e.onFocus,A=e.required,C=e.showOptional,w=e.value,q=e.yearAttributes,P=(0,d.default)(e,["dayAttributes","disabled","displayFormat","error","help","hideRequired","isIncomplete","isInline","isInvalid","isLegendHidden","legend","legendAttributes","monthAttributes","maxWidth","name","onBlur","onChange","onFocus","required","showOptional","value","yearAttributes"]),R=(0,o.useRef)((0,c.default)()),O=I(["date-input-field",{"is-inline":b},P.className]),V=I(["legend",x.className]),j=i?"terra-date-input-field-description-help-".concat(R.current):"",k=v&&r?"terra-date-input-field-description-error-".concat(R.current):"",N="".concat(k," ").concat(j),H=D["aria-describedby"]?D["aria-describedby"]:"",M="".concat(N," ").concat(H),L=t["aria-describedby"]?t["aria-describedby"]:"",$="".concat(N," ").concat(L),B=q["aria-describedby"]?q["aria-describedby"]:"",W="".concat(N," ").concat(B),Y=o.default.createElement("legend",{className:I(["legend-group",{"legend-group-hidden":y}])},o.default.createElement("div",(0,l.default)({},x,{className:V}),v&&o.default.createElement("span",{className:I("error-icon")},o.default.createElement(m.default,null)),A&&(v||!u)&&o.default.createElement(o.default.Fragment,null,o.default.createElement("div",{"aria-hidden":"true",className:I("required")},"*"),o.default.createElement(s.FormattedMessage,{id:"Terra.date.input.required"},(function(e){return o.default.createElement(f.default,{text:e})}))),F,A&&!v&&u&&o.default.createElement("span",{className:I("required-hidden")},"*"),C&&!A&&o.default.createElement(s.FormattedMessage,{id:"Terra.date.input.optional"},(function(e){return o.default.createElement("span",{className:I("optional")},e)})),!v&&o.default.createElement("span",{className:I("error-icon-hidden")})));return o.default.createElement("fieldset",(0,l.default)({},P,{className:O}),Y,o.default.createElement(g.default,{name:E,onChange:S,onBlur:_,onFocus:T,value:w,displayFormat:a,disabled:n,isInvalid:v,isIncomplete:p,required:A,monthAttributes:h({},D,{},{"aria-describedby":M}),dayAttributes:h({},t,{},{"aria-describedby":$}),yearAttributes:h({},q,{},{"aria-describedby":W})}),v&&r&&o.default.createElement("div",{id:k,className:I("error-text")},r),i&&o.default.createElement("div",{id:j,className:I("help-text")},i))};x.propTypes=y,x.defaultProps=F;var D=x;t.default=D},1024:function(e,t,n){e.exports={"date-input-field":"DateInputField-module__date-input-field___3OhAN","is-inline":"DateInputField-module__is-inline___3ybbS","legend-group":"DateInputField-module__legend-group___3EFZW","legend-group-hidden":"DateInputField-module__legend-group-hidden___1BTOn",legend:"DateInputField-module__legend___12gOI","error-icon":"DateInputField-module__error-icon___sBkYW","error-icon-hidden":"DateInputField-module__error-icon-hidden___CTMdH",required:"DateInputField-module__required___3PcZR","required-hidden":"DateInputField-module__required-hidden___xq1oX",optional:"DateInputField-module__optional___2G3Od","help-text":"DateInputField-module__help-text___bmpIC","error-text":"DateInputField-module__error-text____FqDM"}},1392:function(e){e.exports=JSON.parse('{"name":"terra-date-input","main":"lib/DateInput.js","version":"1.8.0","description":"The DateInput allows for easy data entry of known dates like birthdays, anniversaries, etc. The display of the DateInput is localized based on the locale but can be customized via the `displayFormat` prop. The DateInput uses the ISO 8601 format for date values (YYYY-MM-DD).","repository":{"type":"git","url":"git+https://github.com/cerner/terra-framework.git"},"keywords":["Cerner","Terra","Framework","terra-date-input","DateInput","UI"],"author":"Cerner Corporation","license":"Apache-2.0","bugs":{"url":"https://github.com/cerner/terra-framework/issues"},"homepage":"https://github.com/cerner/terra-framework#readme","peerDependencies":{"react":"^16.8.5","react-dom":"^16.8.5","react-intl":"^2.8.0"},"dependencies":{"classnames":"^2.2.5","keycode-js":"^2.0.1","prop-types":"^15.5.8","terra-doc-template":"^2.2.0","terra-form-input":"^2.3.0","terra-icon":"^3.1.0","terra-mixins":"^1.0.0","terra-visually-hidden-text":"^2.0.0","uuid":"^3.3.2"},"scripts":{"compile":"babel --root-mode upward src --out-dir lib --copy-files","lint":"npm run lint:js && npm run lint:scss","lint:js":"eslint --ext .js,.jsx . --ignore-path ../../.eslintignore","lint:scss":"stylelint src/**/*.scss","precompile":"rm -rf lib","test":"npm run jest && npm run wdio","jest":"jest --config ../../jestconfig.js","wdio-default":"cd ../.. && npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio-fusion":"cd ../.. && THEME=orion-fusion-theme npx wdio ./packages/$npm_package_name/wdio.conf.js","wdio":"npm run wdio-default && npm run wdio-fusion"}}')},1932:function(e,t,n){"use strict";n.r(t),t.default="# Terra Date Input Field\n\nDateInputField is a component of terra-date-input that provides a container for rendering the related date inputs. DateInputField includes displays for help text, error text, required or optional indication, and invalid states.\n\n## Component Features\n\n * [Cross-Browser Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#cross-browser-support)\n * [Mobile Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#mobile-support)\n * [Internationalization Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#internationalization-i18n-support)\n * [LTR/RTL Support](https://github.com/cerner/terra-ui/blob/master/src/terra-dev-site/contributing/ComponentStandards.e.contributing.md#ltr--rtl-support)"},1933:function(e,t,n){"use strict";n.r(t),t.default="import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames/bind';\nimport uuidv4 from 'uuid/v4';\nimport IconError from 'terra-icon/lib/icon/IconError';\nimport VisuallyHiddenText from 'terra-visually-hidden-text';\n\nimport DateInput from './DateInput';\nimport styles from './DateInputField.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst propTypes = {\n  /**\n   * The legend of the Date Input fieldset\n   */\n  legend: PropTypes.string.isRequired,\n  /**\n   * Name of the date input. The name should be unique.\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * Custom input attributes to apply to the day input\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  dayAttributes: PropTypes.object,\n  /**\n   * Whether the date input should be disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Can be used to set the display format. One of `month-day-year` or `day-month-year`.\n   * Overrides default locale display format.\n   */\n  displayFormat: PropTypes.string,\n  /**\n   * Error message for when the field is invalid. This will only be displayed if isInvalid is true.\n   */\n  error: PropTypes.node,\n  /**\n   * Help element to display with the field.\n   */\n  help: PropTypes.node,\n  /**\n   * Whether or not to hide the required indicator on the label.\n   */\n  hideRequired: PropTypes.bool,\n  /**\n  * Whether the field displays as Incomplete. Use when no value has been provided. _(usage note: `required` must also be set)_.\n  */\n  isIncomplete: PropTypes.bool,\n  /**\n   * Whether or not the field is an inline field.\n   */\n  isInline: PropTypes.bool,\n  /**\n  * Whether the field displays as Invalid. Use when value does not meet validation pattern.\n  */\n  isInvalid: PropTypes.bool,\n  /**\n   * Whether or not the legend is visible. Use this props to hide a legend while still creating it on the DOM for accessibility.\n   */\n  isLegendHidden: PropTypes.bool,\n  /**\n   * Attributes to attach to the legend.\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  legendAttributes: PropTypes.object,\n  /**\n   * Custom select attributes to apply to the month select\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  monthAttributes: PropTypes.object,\n  /**\n   * Set the max-width of a field using `length` or `%`.  Best practice recommendation to never exceed\n   * a rendered value of 1020px. _(Note: Providing custom inline styles will take precedence.)_\n   */\n  maxWidth: PropTypes.string,\n  /**\n   * A callback function triggered when the date input component loses focus.\n   * This event does not get triggered when the focus is moved from the date input to the calendar button since the focus is still within the main date input component.\n   */\n  onBlur: PropTypes.func,\n  /**\n   * A callback function to execute when a date is entered.\n   * The first parameter is the event. The second parameter is the changed date value.\n   */\n  onChange: PropTypes.func,\n  /**\n   * A callback function triggered when the date input component receives focus.\n   * This event does not get triggered when the focus is moved from the date input to the calendar button since the focus is still within the main date input component.\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Whether or not the date input field is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * Whether or not to append the 'optional' label to a non-required field label.\n   */\n  showOptional: PropTypes.bool,\n  /**\n   * An date string representation of the date value used for the component. This should be in ISO 8601 format: YYYY-MM-DD.\n   */\n  value: PropTypes.string,\n  /**\n   * Custom input attributes to apply to the year input\n   */\n  // eslint-disable-next-line react/forbid-prop-types\n  yearAttributes: PropTypes.object,\n};\n\nconst defaultProps = {\n  dayAttributes: {},\n  disabled: false,\n  displayFormat: undefined,\n  error: null,\n  help: null,\n  hideRequired: false,\n  isIncomplete: false,\n  isInline: false,\n  isInvalid: false,\n  isLegendHidden: false,\n  legendAttributes: {},\n  monthAttributes: {},\n  maxWidth: undefined,\n  onBlur: undefined,\n  onChange: undefined,\n  onFocus: undefined,\n  required: false,\n  showOptional: false,\n  value: '',\n  yearAttributes: {},\n};\n\nconst DateInputField = (props) => {\n  const {\n    dayAttributes,\n    disabled,\n    displayFormat,\n    error,\n    help,\n    hideRequired,\n    isIncomplete,\n    isInline,\n    isInvalid,\n    isLegendHidden,\n    legend,\n    legendAttributes,\n    monthAttributes,\n    maxWidth,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    required,\n    showOptional,\n    value,\n    yearAttributes,\n    ...customProps\n  } = props;\n\n  const uniqueid = useRef(uuidv4());\n\n  const dateInputFieldClasses = cx([\n    'date-input-field',\n    { 'is-inline': isInline },\n    customProps.className,\n  ]);\n\n  const legendClassNames = cx([\n    'legend',\n    legendAttributes.className,\n  ]);\n\n  /**\n   * aria-describedby ids\n   * Used to map legend, help text, and error messages with input/select elements\n   */\n  const helpAriaDescriptionId = help ? `terra-date-input-field-description-help-${uniqueid.current}` : '';\n  const errorAriaDescriptionId = isInvalid && error ? `terra-date-input-field-description-error-${uniqueid.current}` : '';\n  const ariaDescriptionIds = `${errorAriaDescriptionId} ${helpAriaDescriptionId}`;\n\n  const customMonthAriaDescribedById = monthAttributes['aria-describedby'] ? monthAttributes['aria-describedby'] : '';\n  const monthAriaDesciptionIds = `${ariaDescriptionIds} ${customMonthAriaDescribedById}`;\n\n  const customDayAriaDescribedById = dayAttributes['aria-describedby'] ? dayAttributes['aria-describedby'] : '';\n  const dayAriaDesciptionIds = `${ariaDescriptionIds} ${customDayAriaDescribedById}`;\n\n  const customYearAriaDescribedById = yearAttributes['aria-describedby'] ? yearAttributes['aria-describedby'] : '';\n  const yearAriaDesciptionIds = `${ariaDescriptionIds} ${customYearAriaDescribedById}`;\n\n  const legendGroup = (\n    <legend className={cx(['legend-group', { 'legend-group-hidden': isLegendHidden }])}>\n      <div {...legendAttributes} className={legendClassNames}>\n        {isInvalid && <span className={cx('error-icon')}><IconError /></span>}\n        {required && (isInvalid || !hideRequired) && (\n          <React.Fragment>\n            <div aria-hidden=\"true\" className={cx('required')}>*</div>\n            <FormattedMessage id=\"Terra.date.input.required\">\n              {requiredText => (\n                <VisuallyHiddenText text={requiredText} />\n              )}\n            </FormattedMessage>\n          </React.Fragment>\n        )}\n        {legend}\n        {required && !isInvalid && hideRequired && <span className={cx('required-hidden')}>*</span>}\n        {showOptional && !required\n          && (\n            <FormattedMessage id=\"Terra.date.input.optional\">\n              {optionalText => (\n                <span className={cx('optional')}>{optionalText}</span>\n              )}\n            </FormattedMessage>\n          )}\n        {!isInvalid && <span className={cx('error-icon-hidden')} />}\n      </div>\n    </legend>\n  );\n\n  return (\n    <fieldset {...customProps} className={dateInputFieldClasses}>\n      {legendGroup}\n      <DateInput\n        name={name}\n        onChange={onChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        value={value}\n        displayFormat={displayFormat}\n        disabled={disabled}\n        isInvalid={isInvalid}\n        isIncomplete={isIncomplete}\n        required={required}\n        monthAttributes={{ ...monthAttributes, ...{ 'aria-describedby': monthAriaDesciptionIds } }}\n        dayAttributes={{ ...dayAttributes, ...{ 'aria-describedby': dayAriaDesciptionIds } }}\n        yearAttributes={{ ...yearAttributes, ...{ 'aria-describedby': yearAriaDesciptionIds } }}\n      />\n      {isInvalid && error && <div id={errorAriaDescriptionId} className={cx('error-text')}>{error}</div>}\n      {help && <div id={helpAriaDescriptionId} className={cx('help-text')}>{help}</div>}\n    </fieldset>\n  );\n};\n\nDateInputField.propTypes = propTypes;\nDateInputField.defaultProps = defaultProps;\n\nexport default DateInputField;\n"},1934:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},error:"Error message",help:"Help message",isInvalid:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1935:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        error="Error message"\n        help="Help message"\n        isInvalid={isInvalid}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1936:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(""),o=(0,i.default)(r,2),u=o[0],s=o[1],p=(0,l.useState)(!0),c=(0,i.default)(p,2),m=c[0],f=c[1],g=(0,l.useState)(!1),b=(0,i.default)(g,2),v=b[0],h=b[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},isInline:m,isInvalid:v,error:"Error message",help:"Help message"}),l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:u,onChange:function(e,t){return s(t)},isInline:m,isInvalid:v,error:"Error message",help:"Help message"}),l.default.createElement("p",null,"First DateInputField Value: ".concat(n)),l.default.createElement("p",null,"Second DateInputField Value: ".concat(u)),l.default.createElement("button",{type:"button",onClick:function(){return f((function(e){return!e}))}},"Toggle isInline"),l.default.createElement("button",{type:"button",onClick:function(){return h((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1937:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [dateFieldValue1, setDateFieldValue1] = useState(\'\');\n  const [dateFieldValue2, setDateFieldValue2] = useState(\'\');\n  const [isInline, setIsInline] = useState(true);\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={dateFieldValue1}\n        onChange={(event, dateString) => setDateFieldValue1(dateString)}\n        isInline={isInline}\n        isInvalid={isInvalid}\n        error="Error message"\n        help="Help message"\n      />\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={dateFieldValue2}\n        onChange={(event, dateString) => setDateFieldValue2(dateString)}\n        isInline={isInline}\n        isInvalid={isInvalid}\n        error="Error message"\n        help="Help message"\n      />\n      <p>{`First DateInputField Value: ${dateFieldValue1}`}</p>\n      <p>{`Second DateInputField Value: ${dateFieldValue2}`}</p>\n      <button type="button" onClick={() => setIsInline(inline => !inline)}>Toggle isInline</button>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1938:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},showOptional:!0,error:"Error message",help:"Help message",isInvalid:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1939:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        showOptional\n        error="Error message"\n        help="Help message"\n        isInvalid={isInvalid}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1940:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},required:!0,error:"Error message",help:"Help message",isInvalid:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1941:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        required\n        error="Error message"\n        help="Help message"\n        isInvalid={isInvalid}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1942:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},required:!0,hideRequired:!0,error:"Error message",help:"Help message",isInvalid:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1943:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        required\n        hideRequired\n        error="Error message"\n        help="Help message"\n        isInvalid={isInvalid}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1944:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},displayFormat:"day-month-year",error:"Error message",help:"Help message",isInvalid:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1945:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        displayFormat="day-month-year"\n        error="Error message"\n        help="Help message"\n        isInvalid={isInvalid}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1946:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},displayFormat:"month-day-year",error:"Error message",help:"Help message",isInvalid:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isInvalid"))};t.default=o},1947:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isInvalid, setIsInvalid] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        displayFormat="month-day-year"\n        error="Error message"\n        help="Help message"\n        isInvalid={isInvalid}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsInvalid(invalid => !invalid)}>Toggle isInvalid</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},1948:function(e,t,n){"use strict";var a=n(15),r=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var i=r(n(93)),l=a(n(0)),d=r(n(1018)),o=function(){var e=(0,l.useState)(""),t=(0,i.default)(e,2),n=t[0],a=t[1],r=(0,l.useState)(!1),o=(0,i.default)(r,2),u=o[0],s=o[1];return l.default.createElement(l.default.Fragment,null,l.default.createElement(d.default,{legend:"Legend text",name:"date-input-value",value:n,onChange:function(e,t){return a(t)},required:!0,error:"Error message",help:"Help message",isIncomplete:u}),l.default.createElement("p",null,"DateInputField Value: ".concat(n)),l.default.createElement("button",{type:"button",onClick:function(){return s((function(e){return!e}))}},"Toggle isIncomplete"))};t.default=o},1949:function(e,t,n){"use strict";n.r(t),t.default='import React, { useState } from \'react\';\n\n// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, import/extensions\nimport DateInputField from \'terra-date-input/lib/DateInputField\';\n\nconst Example = () => {\n  const [value, setValue] = useState(\'\');\n  const [isIncomplete, setIsIncomplete] = useState(false);\n\n  return (\n    <React.Fragment>\n      <DateInputField\n        legend="Legend text"\n        name="date-input-value"\n        value={value}\n        onChange={(event, dateString) => setValue(dateString)}\n        required\n        error="Error message"\n        help="Help message"\n        isIncomplete={isIncomplete}\n      />\n      <p>{`DateInputField Value: ${value}`}</p>\n      <button type="button" onClick={() => setIsIncomplete(incomplete => !incomplete)}>Toggle isIncomplete</button>\n    </React.Fragment>\n  );\n};\n\nexport default Example;\n'},2332:function(e,t,n){"use strict";var a=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=a(n(0)),i=a(n(1004)),l=a(n(1932)),d=n(1392),o=a(n(1933)),u=a(n(1934)),s=a(n(1935)),p=a(n(1936)),c=a(n(1937)),m=a(n(1938)),f=a(n(1939)),g=a(n(1940)),b=a(n(1941)),v=a(n(1942)),h=a(n(1943)),I=a(n(1944)),y=a(n(1945)),F=a(n(1946)),x=a(n(1947)),D=a(n(1948)),E=a(n(1949)),_=function(){return r.default.createElement(i.default,{packageName:d.name,readme:l.default,srcPath:"https://github.com/cerner/terra-framework/tree/master/packages/".concat(d.name),examples:[{title:"Default DateInputField",example:r.default.createElement(u.default,null),source:s.default},{title:"Required DateInputField",example:r.default.createElement(g.default,null),source:b.default},{title:"Hide Required DateInputField",example:r.default.createElement(v.default,null),source:h.default},{title:"Inline DateInputField",example:r.default.createElement(p.default,null),source:c.default},{title:"Optional DateInputField",example:r.default.createElement(m.default,null),source:f.default},{title:"Month Day Year Display Format DateInputField",example:r.default.createElement(F.default,null),source:x.default},{title:"Day Month Year Display Format DateInputField",example:r.default.createElement(I.default,null),source:y.default},{title:"Incomplete DateInputField",description:"Applies theme-specific styling for incomplete. ***Note: Only use incomplete if given specific guidance, reserved for specific applications when no value has been provided. Not for general use.***",example:r.default.createElement(D.default,null),source:E.default}],propsTables:[{componentName:"DateInputField",componentSrc:o.default}]})};t.default=_}}]);
//# sourceMappingURL=78-b917f366f65ab7140e48.js.map