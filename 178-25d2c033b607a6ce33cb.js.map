{"version":3,"sources":["webpack:///./packages/terra-form-validation/lib/FormValidationUtil.js","webpack:///./packages/terra-form-validation/docs/MaxLengthInput.md","webpack:///./packages/terra-form-validation/lib/terra-dev-site/doc/example/MaxLengthInput.js","webpack:///./packages/terra-form-validation/src/terra-dev-site/doc/example/MaxLengthInput.jsx","webpack:///./packages/terra-form-validation/lib/terra-dev-site/doc/form-validation/MaxLengthInput.5.doc.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_typeof2","_classCallCheck2","_createClass2","_default","FormValidationUtil","this","key","maximum","String","isFinite","Number","isInteger","length","minimum","test","chars","constructor","Array","i","includes","precision","valueSplit","split","parseFloat","_defineProperty2","_possibleConstructorReturn2","_getPrototypeOf2","_assertThisInitialized2","_inherits2","_react","_reactFinalForm","_InputField","_terraButton","_terraSpacer","_FormValidationUtil","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","validateLength","name","isUnderMaxLength","Example","_React$Component","props","_this","call","state","submitForm","bind","values","setState","submittedValues","_ref","handleSubmit","createElement","noValidate","onSubmit","Field","validate","_ref2","input","meta","inputId","label","error","isInvalid","undefined","inputAttrs","placeholder","onChange","e","required","text","type","Opts","Types","SUBMIT","marginBottom","Form","render","renderForm","initialValues","example","errors","JSON","stringify","Component","_terraDocTemplate","_MaxLengthInput","_MaxLengthInput2","_MaxLengthInput3","readme","examples","title"],"mappings":"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","file":"178-25d2c033b607a6ce33cb.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable no-restricted-globals */\nvar FormValidationUtil =\n/*#__PURE__*/\nfunction () {\n  function FormValidationUtil() {\n    (0, _classCallCheck2.default)(this, FormValidationUtil);\n  }\n\n  (0, _createClass2.default)(FormValidationUtil, null, [{\n    key: \"isUnderMaxLength\",\n\n    /* Checks given value's length against maximum. Returns true if value's length is less than or equal to the maximum.\n     * @value is the value string, @maximum is a nonnegative whole number. */\n    value: function isUnderMaxLength(value, maximum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof maximum === 'number' && isFinite(maximum)) || maximum < 0 || !Number.isInteger(maximum)) {\n        return false;\n      }\n\n      return value.length <= maximum;\n    }\n    /* Checks given value's length against minimum. Returns true if value's length is greater than or equal to the minimum.\n     * @value is the value string, @minimum is a nonnegative whole number. */\n\n  }, {\n    key: \"isOverMinLength\",\n    value: function isOverMinLength(value, minimum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof minimum === 'number' && isFinite(minimum)) || minimum < 0 || !Number.isInteger(minimum)) {\n        return false;\n      }\n\n      return value.length >= minimum;\n    }\n    /* Checks given value for extraneous whitespace. return true if there is no whitespace.\n     * @value is the value string */\n\n  }, {\n    key: \"hasNoWhitespace\",\n    value: function hasNoWhitespace(value) {\n      if (!(typeof value === 'string' || value instanceof String)) {\n        return false;\n      }\n\n      return !/\\s/.test(value);\n    }\n    /* Checks given value for any string in given array. return true if value does not contain any of them.\n     * @value is the value string, @chars is an array of strings  */\n\n  }, {\n    key: \"containsCharacters\",\n    value: function containsCharacters(value, chars) {\n      if (!(typeof value === 'string' || value instanceof String) || !(chars && (0, _typeof2.default)(chars) === 'object' && chars.constructor === Array)) {\n        return false;\n      }\n\n      for (var i = 0; i < chars.length; i += 1) {\n        if (value.includes(chars[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /* Checks given value against a minimum value. Returns true if value is greater then or equal to the minimum\n     * @value is the value string, @minimum is the minimum numeric value  */\n\n  }, {\n    key: \"isOverMinValue\",\n    value: function isOverMinValue(value, minimum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof minimum === 'number' && isFinite(minimum))) {\n        return false;\n      }\n\n      return value >= minimum;\n    }\n    /* Checks given value against a maximum value. Returns true if value is less then or equal to the maximum\n     * @value is the value string, @maximum is the maximum numeric value  */\n\n  }, {\n    key: \"isUnderMaxValue\",\n    value: function isUnderMaxValue(value, maximum) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof maximum === 'number' && isFinite(maximum))) {\n        return false;\n      }\n\n      return value <= maximum;\n    }\n    /* Checks given value for a specific level of precision. Returns true if value has less than or an equal amount of precision\n     * @value is the value string, @precision is a nonnegative whole number  */\n\n  }, {\n    key: \"isPrecise\",\n    value: function isPrecise(value, precision) {\n      if (!(typeof value === 'string' || value instanceof String) || !(typeof precision === 'number' && isFinite(precision)) || precision < 0 || !Number.isInteger(precision)) {\n        return false;\n      }\n\n      var valueSplit = value.split('.');\n\n      if (valueSplit.length === 2 && valueSplit[1].length > precision) {\n        return false;\n      }\n\n      return true;\n    }\n    /* Checks given value for if it is a negative value. Returns true if it is nonnegative.\n     * @value is the value string */\n\n  }, {\n    key: \"isNonnegative\",\n    value: function isNonnegative(value) {\n      if (!(typeof value === 'string' || value instanceof String)) {\n        return false;\n      }\n\n      return parseFloat(value) >= 0;\n    }\n  }]);\n  return FormValidationUtil;\n}();\n\nvar _default = FormValidationUtil;\nexports.default = _default;","export default \"# Making an Input With a Maximum Length\\n\\nThis is a step-by-step guide to make a form with a single input that has a maximum length as its validations.\\n\\nFirst we install react-final-form by running `npm install final-form react-final-form`.\\n\\nNext we start writing out actual component by starting with the imports.\\n```javascript\\nimport React from 'react';\\nimport { Form, Field } from 'react-final-form';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport Button from 'terra-button';\\nimport Spacer from 'terra-spacer';\\n```\\n\\nNow we make the basis for our class by setting up its constructor and its render function.\\n```javascript\\nexport default class Example extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {};\\n  }\\n\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n        <Form/>\\n      </Spacer>\\n    );\\n  }\\n}\\n```\\n\\nCurrently, this does not render anything. Let's create a `<Form>` component that contains initial values, and functionality for submission and validation.\\n\\nLet's use the render props pattern to return our necessary components. Call this function `renderForm`.\\n```diff\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n-        <Form/>\\n+        <Form\\n+          render={this.renderForm}\\n+        />\\n      </Spacer>\\n    );\\n  }\\n\\n+ renderForm() {\\n+   return (\\n+     <form noValidate>\\n+       <Field\\n+         name=\\\"example\\\"\\n+       >\\n+         {({ input, meta }) => (\\n+           <InputField\\n+             inputId=\\\"example\\\"\\n+             label=\\\"Example\\\"\\n+             error={meta.error}\\n+             isInvalid={meta.error !== undefined}\\n+             inputAttrs={{\\n+               placeholder: 'Example',\\n+               ...input,\\n+             }}\\n+             onChange={(e) => { input.onChange(e.target.value); }}\\n+             value={input.value}\\n+             required\\n+           />\\n+         )}\\n+       </Field>\\n+       <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n+     </form>\\n+   );\\n+ }\\n```\\n\\nLet's attach functionality to the submit button. Create a `submitForm` function to save submittedValues into state.\\n\\n```javascript\\nsubmitForm(values) {\\n  this.setState({\\n    submittedValues: values,\\n  });\\n}\\n```\\n\\nBind `onSubmit`, pass `onSubmit` as a prop to `<Form>`, pass `handleSubmit` to our render prop function, and pass `handleSubmit` to the native form's `onSubmit` prop.\\n\\n```diff\\nconstructor(props) {\\n  super(props);\\n\\n  this.state = {};\\n+ this.submitForm = this.submitForm.bind(this);\\n}\\n\\nrender() {\\n  return (\\n    <Spacer marginBottom=\\\"small\\\">\\n      <Form\\n+       onSubmit={this.submitForm}\\n        render={this.renderForm}\\n      />\\n    </Spacer>\\n  );\\n}\\n\\nrenderForm({ handleSubmit }) {\\n  return (\\n    <form\\n      noValidate\\n+     onSubmit={handleSubmit}\\n    >\\n      ...\\n    </form>\\n  );\\n}\\n```\\n\\nNow our `Submit` button will actually submit things but it won't give us a visual confirmation of what has been submitted so lets modify our `render` function to show our `submittedValues`\\n\\n```diff\\nrender() {\\n  return (\\n    <Spacer marginBottom=\\\"small\\\">\\n      <Form\\n        onSubmit={this.submitForm}\\n        render={this.renderForm}\\n      />\\n+     {this.state.submittedValues\\n+       && (\\n+       <div>\\n+         <p>Form Submitted Successfully With</p>\\n+         <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\\n+       </div>\\n+       )\\n+     }\\n    </Spacer>\\n  );\\n}\\n```\\n\\nSubmit will now visually update with a JSON of our `submittedValues` state.\\n\\nWe don't need a specific initial value but let's set an initial value that is an empty string so we have an easy place to redefine it if need be. We add an object to our `<Form>`. We define our object with the property being the inputID of our `<InputField>`, which in this case is `example`, and the property's value being the value of the `<InputField>`.\\n```diff\\nrender() {\\n  return (\\n    <Spacer marginBottom=\\\"small\\\">\\n      <Form\\n        onSubmit={this.submitForm}\\n        render={this.renderForm}\\n+       initialValues={{ example: '' }}\\n      />\\n      ...\\n    </Spacer>\\n  );\\n}\\n```\\n\\nFinally we need to validate our input field. This has two parts to it, a `validate` prop on our `<Form>` component and a `validate` prop on our `<Field>` component in our `renderForm` function.\\n\\nThe `<Form>` component's `validate` prop takes a validation function that reads all form values and returns validation errors. Let's create a function that checks the existence of `example` field's values. On error, set the ID to `required`. This will be displayed if validation fails.\\n\\n```diff\\nrender() {\\n  return (\\n    <Spacer marginBottom=\\\"small\\\">\\n      <Form\\n        onSubmit={this.submitForm}\\n        render={this.renderForm}\\n        initialValues={{ example: '' }}\\n+       validate={(values) => {\\n+           const errors = {};\\n+           if (!values.example) {\\n+             errors.example = 'Required';\\n+           }\\n+           return errors;\\n+       }}\\n      />\\n      ...\\n    </Spacer>\\n  );\\n}\\n```\\n\\nOur `validate` function returns an object that has properties, with the property being our ID, and its value being a string we want displayed for when it fails to validate.\\n\\nThe `<Field>` component's `validate` prop is similar to `<Form>`'s, with a main caveat; it only validate's it's value instead of all the values. Let's create a function that checks if the length is greater than 8. This function takes a single argument (value of our `<Field>`) and returns a string if this criteria is met.\\n\\n```javascript\\nconst validateLength = (name) => {\\n  if (name && name.length > 8) {\\n    return 'Name needs to be less than 9 characters long';\\n  }\\n\\n  return undefined;\\n};\\n```\\n\\nFinally, let's add the function as the `validate` prop to `<Field>` within our `renderForm` function.\\n\\n```diff\\nrenderForm({ handleSubmit }) {\\n  return (\\n    <form\\n      noValidate\\n      onSubmit={handleSubmit}\\n    >\\n    <Field\\n      name=\\\"example\\\"\\n+     validate={validateLength}\\n    >\\n      ...\\n    </Field>\\n    <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n    </form>\\n  );\\n}\\n```\\n\\nWe have created an input that is required and has max length of 8 characters by creating our own validate function. For ease of use, Terra provides utils for common validation use cases. In this case, we can use the `validateLength` function.\\n\\n```diff\\nimport FormValidationUtil from 'terra-form-validation';\\n...\\nconst validateLength = (name) => {\\n- if (name && name.length > 8) {\\n+ if (!FormValidationUtil.isUnderMaxLength(name, 8)) {\\n    return 'Name needs to be less than 9 characters long';\\n  }\\n\\n  return undefined;\\n};\\n```\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactFinalForm = require(\"react-final-form\");\n\nvar _InputField = _interopRequireDefault(require(\"terra-form-input/lib/InputField\"));\n\nvar _terraButton = _interopRequireDefault(require(\"terra-button\"));\n\nvar _terraSpacer = _interopRequireDefault(require(\"terra-spacer\"));\n\nvar _FormValidationUtil = _interopRequireDefault(require(\"../../../FormValidationUtil\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar validateLength = function validateLength(name) {\n  if (!_FormValidationUtil.default.isUnderMaxLength(name, 8)) {\n    return 'Name needs to be less than 9 characters long';\n  }\n\n  return undefined;\n};\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Example, _React$Component);\n\n  function Example(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Example);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Example).call(this, props));\n    _this.state = {};\n    _this.submitForm = _this.submitForm.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(Example, [{\n    key: \"submitForm\",\n    value: function submitForm(values) {\n      this.setState({\n        submittedValues: values\n      });\n    }\n  }, {\n    key: \"renderForm\",\n    value: function renderForm(_ref) {\n      var handleSubmit = _ref.handleSubmit;\n      return _react.default.createElement(\"form\", {\n        noValidate: true,\n        onSubmit: handleSubmit\n      }, _react.default.createElement(_reactFinalForm.Field, {\n        name: \"example\",\n        validate: validateLength\n      }, function (_ref2) {\n        var input = _ref2.input,\n            meta = _ref2.meta;\n        return _react.default.createElement(_InputField.default, {\n          inputId: \"example\",\n          label: \"Example\",\n          error: meta.error,\n          isInvalid: meta.error !== undefined,\n          inputAttrs: _objectSpread({\n            placeholder: 'Example'\n          }, input),\n          onChange: function onChange(e) {\n            input.onChange(e.target.value);\n          },\n          value: input.value,\n          required: true\n        });\n      }), _react.default.createElement(_terraButton.default, {\n        text: \"Submit\",\n        type: _terraButton.default.Opts.Types.SUBMIT\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(_terraSpacer.default, {\n        marginBottom: \"small\"\n      }, _react.default.createElement(_reactFinalForm.Form, {\n        onSubmit: this.submitForm,\n        render: this.renderForm,\n        initialValues: {\n          example: ''\n        },\n        validate: function validate(values) {\n          var errors = {};\n\n          if (!values.example) {\n            errors.example = 'Required';\n          }\n\n          return errors;\n        }\n      }), this.state.submittedValues && _react.default.createElement(\"div\", null, _react.default.createElement(\"p\", null, \"Form Submitted Successfully With\"), _react.default.createElement(\"pre\", null, JSON.stringify(this.state.submittedValues, 0, 2))));\n    }\n  }]);\n  return Example;\n}(_react.default.Component);\n\nexports.default = Example;","export default \"/* eslint-disable class-methods-use-this */\\n\\nimport React from 'react';\\nimport { Form, Field } from 'react-final-form';\\nimport InputField from 'terra-form-input/lib/InputField';\\nimport Button from 'terra-button';\\nimport Spacer from 'terra-spacer';\\nimport FormValidationUtil from '../../../FormValidationUtil';\\n\\nconst validateLength = (name) => {\\n  if (!FormValidationUtil.isUnderMaxLength(name, 8)) {\\n    return 'Name needs to be less than 9 characters long';\\n  }\\n\\n  return undefined;\\n};\\n\\nexport default class Example extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {};\\n    this.submitForm = this.submitForm.bind(this);\\n  }\\n\\n  submitForm(values) {\\n    this.setState({\\n      submittedValues: values,\\n    });\\n  }\\n\\n  renderForm({ handleSubmit }) {\\n    return (\\n      <form\\n        noValidate\\n        onSubmit={handleSubmit}\\n      >\\n        <Field\\n          name=\\\"example\\\"\\n          validate={validateLength}\\n        >\\n          {({ input, meta }) => (\\n            <InputField\\n              inputId=\\\"example\\\"\\n              label=\\\"Example\\\"\\n              error={meta.error}\\n              isInvalid={meta.error !== undefined}\\n              inputAttrs={{\\n                placeholder: 'Example',\\n                ...input,\\n              }}\\n              onChange={(e) => { input.onChange(e.target.value); }}\\n              value={input.value}\\n              required\\n            />\\n          )}\\n        </Field>\\n        <Button text=\\\"Submit\\\" type={Button.Opts.Types.SUBMIT} />\\n      </form>\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <Spacer marginBottom=\\\"small\\\">\\n        <Form\\n          onSubmit={this.submitForm}\\n          render={this.renderForm}\\n          initialValues={{ example: '' }}\\n          validate={(values) => {\\n            const errors = {};\\n\\n            if (!values.example) {\\n              errors.example = 'Required';\\n            }\\n\\n            return errors;\\n          }}\\n        />\\n        {this.state.submittedValues\\n          && (\\n          <div>\\n            <p>Form Submitted Successfully With</p>\\n            <pre>{JSON.stringify(this.state.submittedValues, 0, 2)}</pre>\\n          </div>\\n          )}\\n      </Spacer>\\n    );\\n  }\\n}\\n\"","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _terraDocTemplate = _interopRequireDefault(require(\"terra-doc-template\"));\n\nvar _MaxLengthInput = _interopRequireDefault(require(\"../../../../docs/MaxLengthInput.md\"));\n\nvar _MaxLengthInput2 = _interopRequireDefault(require(\"../example/MaxLengthInput\"));\n\nvar _MaxLengthInput3 = _interopRequireDefault(require(\"!raw-loader!../../../../src/terra-dev-site/doc/example/MaxLengthInput\"));\n\n// Example Files\nvar FormValidationExamples = function FormValidationExamples() {\n  return _react.default.createElement(_terraDocTemplate.default, {\n    readme: _MaxLengthInput.default,\n    examples: [{\n      title: 'Max Length Input',\n      example: _react.default.createElement(_MaxLengthInput2.default, null),\n      source: _MaxLengthInput3.default\n    }]\n  });\n};\n\nvar _default = FormValidationExamples;\nexports.default = _default;"],"sourceRoot":""}